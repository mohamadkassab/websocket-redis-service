from typing import Any, ClassVar

from typing import overload
import enum

class AdminAPI:
    class EnExternalSyncModes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        EXTERNAL_SYNC_ALL: ClassVar[MT5Manager.AdminAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_BALANCE: ClassVar[MT5Manager.AdminAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_LAST: ClassVar[MT5Manager.AdminAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_ORDERS: ClassVar[MT5Manager.AdminAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_POSITIONS: ClassVar[MT5Manager.AdminAPI.EnExternalSyncModes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPumpModes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PUMP_MODE_FULL: ClassVar[MT5Manager.AdminAPI.EnPumpModes] = ...
        PUMP_MODE_MAIL: ClassVar[MT5Manager.AdminAPI.EnPumpModes] = ...
        PUMP_MODE_NEWS: ClassVar[MT5Manager.AdminAPI.EnPumpModes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def AutomationDelete(self, pos) -> Any: ...
    @overload
    def AutomationDelete(self, name) -> Any: ...
    def AutomationDeleteBatch(self, configs) -> Any: ...
    def AutomationGet(self, name) -> Any: ...
    def AutomationNext(self, pos) -> Any: ...
    def AutomationShift(self, pos, shift) -> Any: ...
    def AutomationSubscribe(self, sink) -> Any: ...
    def AutomationTotal(self) -> Any: ...
    def AutomationUnsubscribe(self, sink) -> Any: ...
    def AutomationUpdate(self, report) -> Any: ...
    def AutomationUpdateBatch(self, configs) -> Any: ...
    def ChartDelete(self, symbol, bar_list) -> Any: ...
    def ChartReplace(self, symbol, from_date, to_date, bar_list) -> Any: ...
    def ChartRequest(self, symbol, from_date, to_date) -> Any: ...
    def ChartSplit(self, symbol, new_shares, old_shares, rounding_rule, from_date, to_date) -> Any: ...
    def ChartUpdate(self, symbol, bar_list) -> Any: ...
    def CommonGet(self) -> Any: ...
    def CommonSet(self, common) -> Any: ...
    def CommonSubscribe(self, sink) -> Any: ...
    def CommonUnsubscribe(self, sink) -> Any: ...
    def Connect(self, server: str, login: int, password: str, pump_mode, timeout: int) -> Any: ...
    def DealAdd(self, deal) -> Any: ...
    def DealAddBatch(self, deals_list) -> Any: ...
    @overload
    def DealBackupList(self, from_date, to_date) -> Any: ...
    @overload
    def DealBackupList(self, server, from_date, to_date) -> Any: ...
    @overload
    def DealBackupRequest(self, backup, ticket) -> Any: ...
    @overload
    def DealBackupRequest(self, server, backup, ticket) -> Any: ...
    @overload
    def DealBackupRequest(self, backup, login, from_date, to_date) -> Any: ...
    @overload
    def DealBackupRequest(self, server, backup, login, from_date, to_date) -> Any: ...
    def DealBackupRestore(self, deal: MTDeal) -> Any: ...
    def DealDelete(self, deal) -> Any: ...
    def DealDeleteBatch(self, deals_list) -> Any: ...
    def DealPerform(self, deal) -> Any: ...
    def DealPerformBatch(self, deals_list) -> Any: ...
    @overload
    def DealRequest(self, ticket) -> Any: ...
    @overload
    def DealRequest(self, login, from_date, to_date) -> Any: ...
    def DealRequestByGroup(self, group, from_date, to_date) -> Any: ...
    def DealRequestByGroupCSV(self, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupNumPy(self, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupSymbol(self, group, symbol, from_date, to_date) -> Any: ...
    def DealRequestByGroupSymbolCSV(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupSymbolNumPy(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def DealRequestByLogins(self, login_list, from_date, to_date) -> Any: ...
    def DealRequestByLoginsCSV(self, login_list, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsNumPy(self, login_list, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsSymbol(self, login_list, group, from_date, to_date) -> Any: ...
    def DealRequestByLoginsSymbolCSV(self, login_list, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsSymbolNumPy(self, login_list, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByTickets(self, ticket_list) -> Any: ...
    def DealRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def DealRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def DealRequestCSV(self, login, from_date, to_date) -> Any: ...
    def DealRequestNumPy(self, login, from_date, to_date) -> Any: ...
    def DealRequestPage(self, login, from_date, to_date, offset, total) -> Any: ...
    def DealRequestPageCSV(self, login, from_date, to_date, offset, total) -> Any: ...
    def DealRequestPageNumPy(self, login, from_date, to_date, offset, total) -> Any: ...
    def DealUpdate(self, deal) -> Any: ...
    def DealUpdateBatch(self, deals_list) -> Any: ...
    def Disconnect(self) -> Any: ...
    @overload
    def EmailDelete(self, pos) -> Any: ...
    @overload
    def EmailDelete(self, name) -> Any: ...
    def EmailDeleteBatch(self, configs) -> Any: ...
    def EmailGet(self, name) -> Any: ...
    def EmailNext(self, pos) -> Any: ...
    def EmailSend(self, account, to, to_name, subject, body) -> Any: ...
    def EmailShift(self, pos, shift) -> Any: ...
    def EmailSubscribe(self, sink) -> Any: ...
    def EmailTotal(self) -> Any: ...
    def EmailUnsubscribe(self, sink) -> Any: ...
    def EmailUpdate(self, report) -> Any: ...
    def EmailUpdateBatch(self, configs) -> Any: ...
    @overload
    def FeederDelete(self, pos: int) -> Any: ...
    @overload
    def FeederDelete(self, name: str) -> Any: ...
    def FeederDeleteBatch(self, feeders) -> Any: ...
    def FeederGet(self, name) -> Any: ...
    def FeederModuleGet(self, name) -> Any: ...
    def FeederModuleNext(self, pos) -> Any: ...
    def FeederModuleTotal(self) -> Any: ...
    def FeederNext(self, pos) -> Any: ...
    def FeederRestart(self) -> Any: ...
    def FeederShift(self, pos, shift) -> Any: ...
    def FeederSubscribe(self, sink) -> Any: ...
    def FeederTotal(self) -> Any: ...
    def FeederUnsubscribe(self, sink) -> Any: ...
    def FeederUpdate(self, feeder) -> Any: ...
    def FeederUpdateBatch(self, feeders) -> Any: ...
    def FirewallDelete(self, pos) -> Any: ...
    def FirewallDeleteBatch(self, firewalls) -> Any: ...
    def FirewallNext(self, pos) -> Any: ...
    def FirewallShift(self, pos, shift) -> Any: ...
    def FirewallSubscribe(self, sink) -> Any: ...
    def FirewallTotal(self) -> Any: ...
    def FirewallUnsubscribe(self, sink) -> Any: ...
    def FirewallUpdate(self, firewall) -> Any: ...
    def FirewallUpdateBatch(self, firewalls) -> Any: ...
    def GatewayDelete(self, pos) -> Any: ...
    def GatewayDeleteBatch(self, gateways) -> Any: ...
    def GatewayGet(self, name) -> Any: ...
    def GatewayModuleGet(self, name) -> Any: ...
    def GatewayModuleNext(self, pos) -> Any: ...
    def GatewayModuleTotal(self) -> Any: ...
    def GatewayNext(self, pos) -> Any: ...
    def GatewayPositionRequest(self, id) -> Any: ...
    def GatewayRestart(self) -> Any: ...
    def GatewayShift(self, pos, shift) -> Any: ...
    def GatewaySubscribe(self, sink) -> Any: ...
    def GatewayTotal(self) -> Any: ...
    def GatewayUnsubscribe(self, sink) -> Any: ...
    def GatewayUpdate(self, gateway) -> Any: ...
    def GatewayUpdateBatch(self, gateways) -> Any: ...
    def GeoResolve(self, address: str, flags: int) -> MTGeo: ...
    def GeoResolveBatch(self, addresses: list[str], flags: int) -> tuple[list[MTGeo],list[int]]: ...
    @overload
    def GroupDelete(self, pos) -> Any: ...
    @overload
    def GroupDelete(self, name) -> Any: ...
    def GroupDeleteBatch(self, groups) -> Any: ...
    def GroupGet(self, name) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupShift(self, pos, shift) -> Any: ...
    def GroupSubscribe(self, sink) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUnsubscribe(self, sink) -> Any: ...
    def GroupUpdate(self, group) -> Any: ...
    def GroupUpdateBatch(self, groups) -> Any: ...
    def HistoryRequest(self, login, from_date, to_date) -> Any: ...
    def HistoryRequestByGroup(self, group, from_date, to_date) -> Any: ...
    def HistoryRequestByGroupCSV(self, group, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupNumPy(self, group, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupSymbol(self, group, symbol, from_date, to_date) -> Any: ...
    def HistoryRequestByGroupSymbolCSV(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupSymbolNumPy(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLogins(self, login_list, from_date, to_date) -> Any: ...
    def HistoryRequestByLoginsCSV(self, login_list, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsNumPy(self, login_list, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsSymbol(self, login_list, symbol, from_date, to_date) -> Any: ...
    def HistoryRequestByLoginsSymbolCSV(self, login_list, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsSymbolNumPy(self, login_list, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByTickets(self, ticket_list) -> Any: ...
    def HistoryRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def HistoryRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def HistoryRequestCSV(self, login, from_date, to_date, fields) -> Any: ...
    def HistoryRequestNumPy(self, login, from_date, to_date, fields) -> Any: ...
    def HistoryRequestPage(self, login, from_date, to_date, offset, total) -> Any: ...
    def HistoryRequestPageCSV(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def HistoryRequestPageNumPy(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def HistorySyncDelete(self, pos) -> Any: ...
    def HistorySyncDeleteBatch(self, configs) -> Any: ...
    def HistorySyncNext(self, pos) -> Any: ...
    def HistorySyncShift(self, pos, shift) -> Any: ...
    def HistorySyncStart(self) -> Any: ...
    def HistorySyncSubscribe(self, sink) -> Any: ...
    def HistorySyncTotal(self) -> Any: ...
    def HistorySyncUnsubscribe(self, sink) -> Any: ...
    def HistorySyncUpdate(self, report) -> Any: ...
    def HistorySyncUpdateBatch(self, configs) -> Any: ...
    def HolidayDelete(self, pos) -> Any: ...
    def HolidayDeleteBatch(self, holidays) -> Any: ...
    def HolidayGetArray(self) -> Any: ...
    def HolidayNext(self, pos) -> Any: ...
    def HolidayShift(self, pos, shift) -> Any: ...
    def HolidaySubscribe(self, sink) -> Any: ...
    def HolidayTotal(self) -> Any: ...
    def HolidayUnsubscribe(self, sink) -> Any: ...
    def HolidayUpdate(self, holiday) -> Any: ...
    def HolidayUpdateBatch(self, holidays) -> Any: ...
    @overload
    def LeverageDelete(self, pos: int) -> Any: ...
    @overload
    def LeverageDelete(self, name: str) -> Any: ...
    def LeverageDeleteBatch(self, configs: list[MTConLeverage]) -> Any: ...
    def LeverageGet(self, name: str) -> MTConLeverage: ...
    def LeverageNext(self, pos: int) -> MTConLeverage: ...
    def LeverageShift(self, pos: int, shift: int) -> Any: ...
    def LeverageSubscribe(self, callback) -> bool: ...
    def LeverageTotal(self) -> int: ...
    def LeverageUnsubscribe(self, callback) -> bool: ...
    def LeverageUpdate(self, leverage: MTConLeverage) -> Any: ...
    def LeverageUpdateBatch(self, configs: list[MTConLeverage]) -> Any: ...
    def LicenseCheck(self, check: MTLicenseCheck) -> Any: ...
    def LoggerFeederRequest(self, feeder_pos, from_date, to_date, filter) -> Any: ...
    def LoggerFlush(self) -> Any: ...
    def LoggerGatewayRequest(self, gateway_pos, from_date, to_date, filter) -> Any: ...
    def LoggerOut(self, code, msg) -> Any: ...
    def LoggerServerRequest(self, server_id, mode, type, from_date, to_date, filter) -> Any: ...
    def MailSend(self, mail: MTMail) -> bool: ...
    def ManagerCurrent(self) -> Any: ...
    def ManagerDelete(self, pos) -> Any: ...
    def ManagerDeleteBatch(self, managers) -> Any: ...
    def ManagerGet(self, login) -> Any: ...
    def ManagerNext(self, pos) -> Any: ...
    def ManagerShift(self, pos, shift) -> Any: ...
    def ManagerSubscribe(self, sink) -> Any: ...
    def ManagerTotal(self) -> Any: ...
    def ManagerUnsubscribe(self, sink) -> Any: ...
    def ManagerUpdate(self, manager) -> Any: ...
    def ManagerUpdateBatch(self, managers) -> Any: ...
    @overload
    def MessengerDelete(self, pos) -> Any: ...
    @overload
    def MessengerDelete(self, name) -> Any: ...
    def MessengerDeleteBatch(self, configs) -> Any: ...
    def MessengerGet(self, name) -> Any: ...
    def MessengerNext(self, pos) -> Any: ...
    def MessengerSend(self, destination, group, sender, text) -> Any: ...
    def MessengerShift(self, pos, shift) -> Any: ...
    def MessengerSubscribe(self, sink) -> Any: ...
    def MessengerTotal(self) -> Any: ...
    def MessengerUnsubscribe(self, sink) -> Any: ...
    def MessengerUpdate(self, report) -> Any: ...
    def MessengerUpdateBatch(self, configs) -> Any: ...
    def MessengerVerifyPhone(self, phone_number) -> Any: ...
    def NetServerDelete(self, pos) -> Any: ...
    def NetServerDeleteBatch(self, configs: list[MTConServer]) -> Any: ...
    def NetServerGet(self, id) -> Any: ...
    def NetServerNext(self, pos) -> Any: ...
    def NetServerRestart(self, id) -> Any: ...
    def NetServerShift(self, pos, shift) -> Any: ...
    def NetServerSubscribe(self, sink) -> Any: ...
    def NetServerTotal(self) -> Any: ...
    def NetServerUnsubscribe(self, sink) -> Any: ...
    def NetServerUpdate(self, server) -> Any: ...
    def NetServerUpdateBatch(self, configs: list[MTConServer]) -> Any: ...
    def NetworkAddress(self) -> str: ...
    def NetworkBytesRead(self) -> int: ...
    def NetworkBytesSent(self) -> int: ...
    def NetworkRescan(self, flags: int, timeout: int) -> bool: ...
    def NetworkServer(self) -> str: ...
    def NewsSend(self, news) -> Any: ...
    def NewsSubscribe(self, news_sink) -> Any: ...
    def NewsUnsubscribe(self, news_sink) -> Any: ...
    @overload
    def NotificationsSend(self, metaquotes_id, message) -> Any: ...
    @overload
    def NotificationsSend(self, login_list, message) -> Any: ...
    def OrderAdd(self, order) -> Any: ...
    def OrderAddBatch(self, orders_list) -> Any: ...
    @overload
    def OrderBackupList(self, from_date, to_date) -> Any: ...
    @overload
    def OrderBackupList(self, server, from_date, to_date) -> Any: ...
    @overload
    def OrderBackupRequest(self, backup, ticket) -> Any: ...
    @overload
    def OrderBackupRequest(self, server, backup, ticket) -> Any: ...
    @overload
    def OrderBackupRequestHistory(self, backup, login, from_date, to_date) -> Any: ...
    @overload
    def OrderBackupRequestHistory(self, server, backup, login, from_date, to_date) -> Any: ...
    @overload
    def OrderBackupRequestOpen(self, backup, login) -> Any: ...
    @overload
    def OrderBackupRequestOpen(self, server, backup, login) -> Any: ...
    def OrderBackupRestore(self, order: MTOrder) -> Any: ...
    def OrderCancel(self, ticket) -> Any: ...
    def OrderCancelBatch(self, ticket_list) -> Any: ...
    def OrderDelete(self, ticket) -> Any: ...
    def OrderDeleteBatch(self, ticket_list) -> Any: ...
    def OrderReopen(self, ticket: int) -> Any: ...
    def OrderRequest(self, ticket: int) -> MTOrder: ...
    def OrderRequestByGroup(self, group) -> Any: ...
    def OrderRequestByGroupCSV(self, group, fields) -> Any: ...
    def OrderRequestByGroupNumPy(self, group, fields) -> Any: ...
    def OrderRequestByGroupSymbol(self, group, symbol) -> Any: ...
    def OrderRequestByGroupSymbolCSV(self, group, symbol, fields) -> Any: ...
    def OrderRequestByGroupSymbolNumPy(self, group, symbol, fields) -> Any: ...
    def OrderRequestByLogins(self, login_list) -> Any: ...
    def OrderRequestByLoginsCSV(self, login_list, fields) -> Any: ...
    def OrderRequestByLoginsNumPy(self, login_list, fields) -> Any: ...
    def OrderRequestByLoginsSymbol(self, login_list, symbol) -> Any: ...
    def OrderRequestByLoginsSymbolCSV(self, login_list, symbol, fields) -> Any: ...
    def OrderRequestByLoginsSymbolNumPy(self, login_list, symbol, fields) -> Any: ...
    def OrderRequestByTickets(self, ticket_list) -> Any: ...
    def OrderRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def OrderRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def OrderRequestOpen(self, login) -> Any: ...
    def OrderRequestOpenCSV(self, login, fields) -> Any: ...
    def OrderRequestOpenNumPy(self, login, fields) -> Any: ...
    def OrderUpdate(self, order) -> Any: ...
    def OrderUpdateBatch(self, orders_list) -> Any: ...
    def PasswordChange(self, type: int, password: str) -> Any: ...
    @overload
    def PluginDelete(self, pos) -> Any: ...
    @overload
    def PluginDelete(self, server_id, name) -> Any: ...
    def PluginDeleteBatch(self, plugins) -> Any: ...
    @overload
    def PluginGet(self, server_id, name) -> Any: ...
    @overload
    def PluginGet(self) -> Any: ...
    def PluginModuleGet(self, server_id, name) -> Any: ...
    def PluginModuleNext(self, pos) -> Any: ...
    def PluginModuleTotal(self) -> Any: ...
    def PluginNext(self, pos) -> Any: ...
    def PluginShift(self, pos, shift) -> Any: ...
    def PluginSubscribe(self, sink) -> Any: ...
    def PluginTotal(self) -> Any: ...
    def PluginUnsubscribe(self, sink) -> Any: ...
    def PluginUpdate(self, plugin) -> Any: ...
    def PluginUpdateBatch(self, plugins) -> Any: ...
    @overload
    def PositionBackupList(self, from_date, to_date) -> Any: ...
    @overload
    def PositionBackupList(self, server, from_date, to_date) -> Any: ...
    @overload
    def PositionBackupRequest(self, backup, login) -> Any: ...
    @overload
    def PositionBackupRequest(self, server, backup, login) -> Any: ...
    def PositionBackupRestore(self, position: MTPosition) -> Any: ...
    def PositionCheck(self, login: int) -> tuple[list[MTPosition],list[MTPosition],list[MTPosition],list[MTPosition]]: ...
    def PositionDelete(self, position) -> Any: ...
    def PositionDeleteBatch(self, positions_list) -> Any: ...
    def PositionDeleteByTicket(self, ticket) -> Any: ...
    def PositionFix(self, login: int) -> list[MTPosition]: ...
    def PositionRequest(self, login: int) -> list[MTPosition]: ...
    def PositionRequestByGroup(self, group) -> Any: ...
    def PositionRequestByGroupCSV(self, group, fields) -> Any: ...
    def PositionRequestByGroupNumPy(self, group, fields) -> Any: ...
    def PositionRequestByGroupSymbol(self, group, symbol) -> Any: ...
    def PositionRequestByGroupSymbolCSV(self, group, symbol, fields) -> Any: ...
    def PositionRequestByGroupSymbolNumPy(self, group, symbol, fields) -> Any: ...
    def PositionRequestByLogins(self, login_list) -> Any: ...
    def PositionRequestByLoginsCSV(self, login_list, fields) -> Any: ...
    def PositionRequestByLoginsNumPy(self, login_list, fields) -> Any: ...
    def PositionRequestByLoginsSymbol(self, login_list, symbol) -> Any: ...
    def PositionRequestByLoginsSymbolCSV(self, login_list, symbol, fields) -> Any: ...
    def PositionRequestByLoginsSymbolNumPy(self, login_list, symbol, fields) -> Any: ...
    def PositionRequestByTickets(self, ticket_list) -> Any: ...
    def PositionRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def PositionRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def PositionRequestCSV(self, login, fields) -> Any: ...
    def PositionRequestNumPy(self, login, fields) -> Any: ...
    def PositionSplit(self, tickets, adjustments, new_shares, old_shares, round_rule_price, round_rule_volume, flags) -> Any: ...
    def PositionUpdate(self, position) -> Any: ...
    def PositionUpdateBatch(self, positions_list) -> Any: ...
    @overload
    def ReportDelete(self, pos) -> Any: ...
    @overload
    def ReportDelete(self, server_id: int, name: str) -> Any: ...
    def ReportDeleteBatch(self, configs) -> Any: ...
    def ReportGet(self, server_id, name) -> Any: ...
    def ReportModuleGet(self, server_id, name) -> Any: ...
    def ReportModuleNext(self, pos) -> Any: ...
    def ReportModuleTotal(self) -> Any: ...
    def ReportNext(self, pos) -> Any: ...
    def ReportShift(self, pos, shift) -> Any: ...
    def ReportSubscribe(self, sink) -> Any: ...
    def ReportTotal(self) -> Any: ...
    def ReportUnsubscribe(self, sink) -> Any: ...
    def ReportUpdate(self, report) -> Any: ...
    def ReportUpdateBatch(self, configs) -> Any: ...
    @overload
    def RouteDelete(self, pos: int) -> Any: ...
    @overload
    def RouteDelete(self, name: str) -> Any: ...
    def RouteDeleteBatch(self, managers) -> Any: ...
    def RouteGet(self, name) -> Any: ...
    def RouteNext(self, pos) -> Any: ...
    def RouteShift(self, pos, shift) -> Any: ...
    def RouteSubscribe(self, sink) -> Any: ...
    def RouteTotal(self) -> Any: ...
    def RouteUnsubscribe(self, sink) -> Any: ...
    def RouteUpdate(self, route) -> Any: ...
    def RouteUpdateBatch(self, managers) -> Any: ...
    def ServerActivate(self) -> Any: ...
    def ServerLiveUpdate(self) -> Any: ...
    def SettingDelete(self, section, key) -> Any: ...
    def SettingGet(self, section, key) -> Any: ...
    def SettingSet(self, section, key, indata) -> Any: ...
    def SpreadDelete(self, pos) -> Any: ...
    def SpreadDeleteBatch(self, spreads) -> Any: ...
    def SpreadGetArray(self) -> list[MTConSpread]: ...
    def SpreadNext(self, pos) -> Any: ...
    def SpreadShift(self, pos, shift) -> Any: ...
    def SpreadSubscribe(self, spread_sink) -> Any: ...
    def SpreadTotal(self) -> Any: ...
    def SpreadUnsubscribe(self, spread_sink) -> Any: ...
    def SpreadUpdate(self, spread) -> Any: ...
    def SpreadUpdateBatch(self, spreads) -> Any: ...
    def Subscribe(self, sink) -> Any: ...
    @overload
    def SymbolDelete(self, pos: int) -> Any: ...
    @overload
    def SymbolDelete(self, name: str) -> Any: ...
    def SymbolDeleteBatch(self, symbols) -> Any: ...
    def SymbolExist(self, symbol, group) -> Any: ...
    def SymbolGet(self, name: str) -> MTConSymbol: ...
    def SymbolGetArray(self) -> Any: ...
    def SymbolNext(self, pos: int) -> MTConSymbol: ...
    def SymbolShift(self, pos, shift) -> Any: ...
    def SymbolTotal(self) -> Any: ...
    def SymbolUpdate(self, symbol) -> Any: ...
    def SymbolUpdateBatch(self, symbol) -> Any: ...
    def TickAdd(self, symbol, tick_list) -> Any: ...
    def TickReplace(self, symbol, from_date, to_date, tick_list) -> Any: ...
    def TickRequest(self, symbol, from_date, to_date) -> Any: ...
    def TickRequestRaw(self, symbol, from_date, to_date) -> Any: ...
    def TimeGet(self) -> Any: ...
    def TimeServer(self) -> Any: ...
    def TimeServerRequest(self) -> Any: ...
    def TimeSet(self, config) -> Any: ...
    def TimeSubscribe(self, sink) -> Any: ...
    def TimeUnsubscribe(self, sink) -> Any: ...
    def Unsubscribe(self, sink) -> Any: ...
    def UserAdd(self, user, master, investor) -> Any: ...
    def UserArchive(self, login) -> Any: ...
    def UserArchiveBatch(self, login_list) -> Any: ...
    def UserArchiveRequest(self, login) -> Any: ...
    def UserArchiveRequestArray(self, groups) -> Any: ...
    def UserArchiveRequestByLogins(self, login_list) -> Any: ...
    @overload
    def UserBackupList(self, from_date, to_date) -> Any: ...
    @overload
    def UserBackupList(self, server, from_date, to_date) -> Any: ...
    @overload
    def UserBackupRequest(self, backup, login) -> Any: ...
    @overload
    def UserBackupRequest(self, server, backup, login) -> Any: ...
    def UserBackupRequestArray(self, server, backup, groups) -> Any: ...
    def UserBackupRequestByLogins(self, server, backup, login_list) -> Any: ...
    def UserBalanceCheck(self, login, fix_flag) -> Any: ...
    def UserBalanceCheckBatch(self, logins_list, fix_flag) -> Any: ...
    def UserCertConfirm(self, login) -> Any: ...
    def UserCertDelete(self, login) -> Any: ...
    def UserCertGet(self, login) -> Any: ...
    def UserCertUpdate(self, login, certificate) -> Any: ...
    def UserDelete(self, login) -> Any: ...
    def UserDeleteBatch(self, login_list) -> Any: ...
    @overload
    def UserExternalRequest(self, gateway_id, account) -> Any: ...
    @overload
    def UserExternalRequest(self, account) -> Any: ...
    def UserExternalSync(self, login, gateway_id, account, sync_mode) -> Any: ...
    def UserLogins(self, group) -> Any: ...
    def UserPasswordChange(self, type, login, password) -> Any: ...
    def UserPasswordCheck(self, type, login, password) -> Any: ...
    def UserRequest(self, login) -> Any: ...
    def UserRequestByGroup(self, group: str) -> Any: ...
    def UserRequestByGroupCSV(self, group: str, fields: str) -> Any: ...
    def UserRequestByGroupNumPy(self, group: str, fields: str) -> Any: ...
    def UserRequestByLogins(self, login_list) -> Any: ...
    def UserRequestByLoginsCSV(self, login_list, fields: str) -> Any: ...
    def UserRequestByLoginsNumPy(self, login_list, fields: str) -> Any: ...
    def UserRestore(self, user) -> Any: ...
    def UserRestoreBatch(self, user_list) -> Any: ...
    def UserUpdate(self, user) -> Any: ...
    def UserUpdateBatch(self, user_list) -> Any: ...
    def VPSGet(self, name) -> Any: ...
    def VPSSet(self, name) -> Any: ...
    def VPSSubscribe(self, sink) -> Any: ...
    def VPSUnsubscribe(self, sink) -> Any: ...

class EnMTAPIRetcode(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    MT_RET_AUTH_ACCOUNT_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_ACCOUNT_INVALID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_ACCOUNT_UNKNOWN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_ADVANCED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_API_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_CA_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_CERTIFICATE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_CERTIFICATE_BAD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_CLIENT_INVALID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_CLIENT_OLD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_DEMO_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_GROUP_INVALID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_INVALID_ID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_INVALID_IP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_INVALID_TYPE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_INVALID_VERIFY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MANAGER_IPBLOCK: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MANAGER_NOCONFIG: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MANAGER_TYPE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MIGRATION_MT4: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MIGRATION_MT5: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_MOBILE_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_NOTCONFIRMED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_OTP_INVALID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_OTP_NEED_SECRET: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_RESET_PASSWORD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_BAD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_BUSY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_CERT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_INTERNAL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_LIMIT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_SERVER_OLD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_UPDATE_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_VERIFY_BAD_EMAIL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_AUTH_VERIFY_BAD_PHONE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_ANOTHER_SWITCH: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_BIND_ADDR_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_BUILTIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_DEALER_ID_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_DUPLICATE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_GATEWAY_LOGIN_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_GATEWAY_NAME_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_INVALID_RANGE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_LAST_ADMIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_LAST_ADMIN_GROUP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_LIMIT_REACHED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NOT_EMPTY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NOT_MANAGER_LOGIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NO_ACCESS_TO_MAIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NO_BACKUP_MODULE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NO_HISTORY_MODULE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NO_LICENSE_FILE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_NO_TRADE_MODULE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_SWITCH_TO_BACKUP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_CFG_WORKING_TRADE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERROR: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_CANCEL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_CONNECTION: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_DATA: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_DEADLOCK: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_DISK: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_DUPLICATE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_FREQUENT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_LOCKED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_MEM: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NETWORK: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NOSERVICE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NOTFOUND: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NOTIMPLEMENT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NOTMAIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_NOTSUPPORTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_PARAMS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_PARTIAL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_PERMISSIONS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_SHUTDOWN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_ERR_TIMEOUT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_HST_SYMBOL_NOTFOUND: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_MESSENGER_INVALID_PHONE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_MESSENGER_NOT_MOBILE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_OK: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_OK_NONE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_CONVERSION: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_DECLINE_BY_AML: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_DECLINE_BY_CARDHOLDER_NAME: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_DECLINE_BY_RULES: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_INVALID_AMOUNT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_INVALID_CURRENCY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_INVOICE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_LIMIT_DEPOSIT_MAX: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_LIMIT_DEPOSIT_MIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_LIMIT_REACHED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_LIMIT_WITHDRAWAL_MAX: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_LIMIT_WITHDRAWAL_MIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_NOT_ALLOWED_COUNTRY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_NOT_ALLOWED_DEPOSIT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_NOT_ALLOWED_GROUP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_NOT_ALLOWED_WITHDRAWAL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_NOT_WAITING: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_PROVIDER_PAYMENT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_PROVIDER_REFUND: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_PROVIDER_STATUS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_REAL_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_PAY_VERIFICATION: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_INVALID_ROW: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_LIMIT_REPEAT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_LIMIT_REPORT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_NODATA: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_NOTSUPPORTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_SNAPSHOT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_TEMPLATE_BAD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REPORT_TEMPLATE_END: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_ACCEPTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_AT_DISABLED_CLIENT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_AT_DISABLED_SERVER: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_CANCEL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_CLOSE_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_CLOSE_ORDER_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_CONNECTION: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_DONE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_DONE_CANCEL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_DONE_PARTIAL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_ERROR: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_EXECUTION_SKIPPED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_FROZEN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_HEDGE_PROHIBITED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_CLOSE_VOLUME: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_EXP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_FILL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_ORDER: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_PRICE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_STOPS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INVALID_VOLUME: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_INWAY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_LIMIT_ORDERS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_LIMIT_POSITIONS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_LIMIT_VOLUME: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_LOCKED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_LONG_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_MARKET_CLOSED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_NO_CHANGES: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_NO_MONEY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_ONLY_REAL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_ORDER_CHANGED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PLACED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_POSITION_CLOSED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PRICES: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PRICE_CHANGED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PRICE_OFF: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PROCESS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_PROHIBITED_BY_FIFO: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_REJECT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_REJECT_CANCEL: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_REQUOTE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_REQUOTE_RETURN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_RETURN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_SHORT_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_TIMEOUT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_TOO_MANY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_REQUEST_TRADE_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_DISABLED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_NOT_FOUND: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_NOT_FOUND_CFG: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_NOT_FOUND_USER: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_PAYMENT_METHOD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_PERMISSION_SUBSCRIBE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_PERMISSION_UNSUBSCRIBE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_PERMISSION_USER: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_SUBS_REAL_ONLY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_DEAL_EXHAUSTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_DEAL_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_DEAL_PROHIBITED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_LIMIT_REACHED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_MAX_MONEY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_ORDER_EXHAUSTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_ORDER_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_ORDER_PROHIBITED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_TRADE_SPLIT_VOLUME: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_ACCOUNT_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_API_LIMIT_REACHED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_DIFFERENT_CURRENCY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_DIFFERENT_SERVERS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_HAS_TRADES: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_ACCOUNT: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_BALANCE: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_DEALS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_GROUP: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_HISTORY: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_ORDERS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_IMPORT_POSITIONS: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_INVALID_PASSWORD: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_LAST_ADMIN: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_LIMIT_REACHED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_LOGIN_EXHAUSTED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_LOGIN_EXIST: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_LOGIN_PROHIBITED: ClassVar[EnMTAPIRetcode] = ...
    MT_RET_USR_SUICIDE: ClassVar[EnMTAPIRetcode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnMTFeederConstants(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    MT_FEEDER_DEALER: ClassVar[MT5Manager.MTTick.EnMTFeederConstants] = ...
    MT_FEEDER_OFFSET: ClassVar[MT5Manager.MTTick.EnMTFeederConstants] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnMTLogCode(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    MTLogAtt: ClassVar[EnMTLogCode] = ...
    MTLogErr: ClassVar[EnMTLogCode] = ...
    MTLogFirst: ClassVar[EnMTLogCode] = ...
    MTLogFolder: ClassVar[EnMTLogCode] = ...
    MTLogLast: ClassVar[EnMTLogCode] = ...
    MTLogLogin: ClassVar[EnMTLogCode] = ...
    MTLogOK: ClassVar[EnMTLogCode] = ...
    MTLogWarn: ClassVar[EnMTLogCode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnMTLogFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    LOG_FLAGS_ALL: ClassVar[EnMTLogFlags] = ...
    LOG_FLAGS_CORRUPTED: ClassVar[EnMTLogFlags] = ...
    LOG_FLAGS_FIRST: ClassVar[EnMTLogFlags] = ...
    LOG_FLAGS_NONE: ClassVar[EnMTLogFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnMTLogRequestMode(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    MTLogModeErr: ClassVar[EnMTLogRequestMode] = ...
    MTLogModeFirst: ClassVar[EnMTLogRequestMode] = ...
    MTLogModeFull: ClassVar[EnMTLogRequestMode] = ...
    MTLogModeLast: ClassVar[EnMTLogRequestMode] = ...
    MTLogModeStd: ClassVar[EnMTLogRequestMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnMTLogType(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    MTLogTypeAPI: ClassVar[EnMTLogType] = ...
    MTLogTypeAll: ClassVar[EnMTLogType] = ...
    MTLogTypeCfg: ClassVar[EnMTLogType] = ...
    MTLogTypeFirst: ClassVar[EnMTLogType] = ...
    MTLogTypeHst: ClassVar[EnMTLogType] = ...
    MTLogTypeLast: ClassVar[EnMTLogType] = ...
    MTLogTypeLiveUpdate: ClassVar[EnMTLogType] = ...
    MTLogTypeNet: ClassVar[EnMTLogType] = ...
    MTLogTypeNotify: ClassVar[EnMTLogType] = ...
    MTLogTypeSendMail: ClassVar[EnMTLogType] = ...
    MTLogTypeSys: ClassVar[EnMTLogType] = ...
    MTLogTypeTrade: ClassVar[EnMTLogType] = ...
    MTLogTypeUser: ClassVar[EnMTLogType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnSplitRounding(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __ceil__(self, *args, **kwargs) -> int: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floor__(self, *args, **kwargs) -> int: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> int: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> int: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    SPLIT_ROUNDING_DOWN: ClassVar[MT5Manager.MTChartBar.EnSplitRounding] = ...
    SPLIT_ROUNDING_FIRST: ClassVar[MT5Manager.MTChartBar.EnSplitRounding] = ...
    SPLIT_ROUNDING_LAST: ClassVar[MT5Manager.MTChartBar.EnSplitRounding] = ...
    SPLIT_ROUNDING_STANDARD: ClassVar[MT5Manager.MTChartBar.EnSplitRounding] = ...
    SPLIT_ROUNDING_UP: ClassVar[MT5Manager.MTChartBar.EnSplitRounding] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MTAccount:
    class EnSoActivation(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTIVATION_FIRST: ClassVar[MT5Manager.MTAccount.EnSoActivation] = ...
        ACTIVATION_LAST: ClassVar[MT5Manager.MTAccount.EnSoActivation] = ...
        ACTIVATION_MARGIN_CALL: ClassVar[MT5Manager.MTAccount.EnSoActivation] = ...
        ACTIVATION_NONE: ClassVar[MT5Manager.MTAccount.EnSoActivation] = ...
        ACTIVATION_STOP_OUT: ClassVar[MT5Manager.MTAccount.EnSoActivation] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Assets: Any
    Balance: Any
    BlockedCommission: Any
    BlockedProfit: Any
    Credit: Any
    CurrencyDigits: Any
    Equity: Any
    Floating: Any
    Liabilities: Any
    Login: Any
    Margin: Any
    MarginFree: Any
    MarginInitial: Any
    MarginLevel: Any
    MarginLeverage: Any
    MarginMaintenance: Any
    ObsoleteValue: Any
    Profit: Any
    SOActivation: Any
    SOEquity: Any
    SOLevel: Any
    SOMargin: Any
    SOTime: Any
    Storage: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTBook:
    class EnBookFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ALL: ClassVar[MT5Manager.MTBook.EnBookFlags] = ...
        FLAG_NONE: ClassVar[MT5Manager.MTBook.EnBookFlags] = ...
        FLAG_PRE_AUCTION: ClassVar[MT5Manager.MTBook.EnBookFlags] = ...
        FLAG_SNAPSHOT: ClassVar[MT5Manager.MTBook.EnBookFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    datetime: Any
    datetime_msc: Any
    flags: Any
    items_total: Any
    symbol: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def items_get(self) -> list[MTBookItem]: ...

class MTBookItem:
    class EnBookItem(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ItemBuy: ClassVar[MT5Manager.MTBookItem.EnBookItem] = ...
        ItemBuyMarket: ClassVar[MT5Manager.MTBookItem.EnBookItem] = ...
        ItemReset: ClassVar[MT5Manager.MTBookItem.EnBookItem] = ...
        ItemSell: ClassVar[MT5Manager.MTBookItem.EnBookItem] = ...
        ItemSellMarket: ClassVar[MT5Manager.MTBookItem.EnBookItem] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    price: Any
    type: Any
    volume: Any
    volume_ext: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTCertificate:
    IsCA: Any
    IsOpened: Any
    IsRoot: Any
    NameCommon: Any
    NameGiven: Any
    NameIssuer: Any
    NameOrganization: Any
    NameOrganizationUnit: Any
    SerialNumber: Any
    ValidFrom: Any
    ValidTo: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Close(self) -> Any: ...
    def Open(self, filename) -> Any: ...
    def OpenMemory(self, data: bytes) -> Any: ...
    def Raw(self) -> Any: ...
    def RawSize(self) -> Any: ...
    def Save(self, filename) -> Any: ...

class MTChartBar:
    close: Any
    datetime: Any
    high: Any
    low: Any
    open: Any
    spread: Any
    tick_volume: Any
    volume: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConAddressRange:
    From: Any
    To: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConAutoAction:
    class EnActions(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTION_ACCOUNT_ARCHIVE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_CHANGE_COLOR: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_CHANGE_GROUP: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_CLIENT_COMMENT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_COMMENT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_DISABLE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_DISABLE_EXPERT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_DISABLE_TRADE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_DISABLE_TRAILING: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_ENABLE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_ENABLE_EXPERT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_ENABLE_TRADE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_ENABLE_TRAILING: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_FORCE_CHANGE_PASS: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_ACCOUNT_LEVERAGE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_DATAFEED_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_GATEWAY_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_GROUP_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_ROUTING_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_SERVER_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_SYMBOL_MOVE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_CONFIG_SYMBOL_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_APPLICATION: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_FINTEZA_EVENT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_HTTP_REQUEST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_EXTERNAL_PLUGIN: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_BONUS: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_BONUS_PAYOFF: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_BONUS_PERCENT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_CREDIT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_CREDIT_PAYOFF: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_DEPOSIT: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_DEPOSIT_PAYOFF: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FINANCE_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_CHANNEL: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_EMAIL: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_INTERNAL: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_JOURNAL: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_PUSH: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_MESSAGE_SMS: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_LIVE_UPDATE: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_RESTART_FEED: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_RESTART_GATEWAY: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_RESTART_SERVER: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_PLATFORM_SYNC_HISTORY: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_TRADE_CLOSE_ORDERS: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_TRADE_CLOSE_POSITIONS: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_TRADE_FIRST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        ACTION_TRADE_LAST: ClassVar[MT5Manager.MTConAutoAction.EnActions] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    Name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ParameterAdd(self, parameter) -> Any: ...
    def ParameterClear(self) -> Any: ...
    def ParameterDelete(self, pos) -> Any: ...
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterSet(self, parameter_list) -> Any: ...
    def ParameterShift(self, pos, shift) -> Any: ...
    def ParameterTotal(self) -> Any: ...
    def ParameterUpdate(self, pos, parameter) -> Any: ...

class MTConAutoCondition:
    class EnConditionRule(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RULE_EQ: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_GREATER: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_LESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_MATCH_MASK: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_NOT_EQ: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_NOT_GREATER: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        RULE_NOT_LESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditionRule] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnConditionType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_BOOL: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_COLOR: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_DATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_DATETIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_DEAL: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_DEAL_ENTRY: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_DOUBLE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_INT: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_KYC_STATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_LANGUAGE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_LEVERAGE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_MONEY: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_NONE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_ORDER: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_ORDER_STATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_PERCENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_POSITION: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_REASON: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_SERVER: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_STRING: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_TIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_UINT: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        TYPE_VOLUME: ClassVar[MT5Manager.MTConAutoCondition.EnConditionType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnConditions(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        CONDITION_ACCOUNT_ACTIVITY_BALANCE_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_ACTIVITY_CREDIT_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_ACTIVITY_TRADE_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_AGENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_BALANCE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_CITY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_CLIENT_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_COLOR: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_COMMENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_COMPANY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_COUNTRY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_CREDIT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_CURRENCY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_EMAIL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_ENABLED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_EQUITY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_EXPERT_ENABLED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_GROUP: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_GROUP_PREVIOUS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LANGUAGE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LASTTIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LASTTIME_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LEAD_CAMPAIGN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LEAD_SOURCE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LEVERAGE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_LOGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_MARGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_MARGIN_FREE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_MARGIN_LEVEL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_ONLINE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_ORDERS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_OWN_FUNDS_PERCENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_OWN_FUNDS_VOLUME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_PHONE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_POSITIONS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_PROFIT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_REGISTRATION: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_REGISTRATION_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_STATUS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ACCOUNT_TRADING_ENABLED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_ASN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_CITY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_COUNTRY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_ATTACKER: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_BOTNET: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_DATACENTER: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_PROXY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_TOR: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_FLAG_VPN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_IP: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_ISP: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_CONNECTION_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATAFEED_CONNECTED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATAFEED_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATAFEED_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATAFEED_NAME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATETIME_DATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATETIME_DATETIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATETIME_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATETIME_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DATETIME_TIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_COMMENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_ENTRY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_EXPERT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_LOGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_PRICE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_PROFIT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_REASON: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_SYMBOL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_TICKET: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_TIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_TYPE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_DEAL_VOLUME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_EXTERNAL_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_EXTERNAL_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_EXTERNAL_WEBCALLBACK_URL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FINANCE_AMOUNT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FINANCE_COMMENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FINANCE_CURRENCY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FINANCE_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FINANCE_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_GATEWAY_CONNECTED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_GATEWAY_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_GATEWAY_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_GATEWAY_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_GATEWAY_NAME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_KYC_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_KYC_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_KYC_REJECT_REASON: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_KYC_STATE_CODE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_KYC_STATE_DESC: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MANAGER_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MANAGER_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MANAGER_LOGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_ADDRESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_BODY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_FROM: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_FROM_NAME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_PROVIDER_BALANCE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_PROVIDER_NAME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_SUBJECT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_TO: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MESSAGE_TO_NAME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_CPU: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_CPU_DPC: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_CPU_INTERRUPTS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_CPU_PROCESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_CPU_PROCESS_THREADS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_DISK_FREE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_DISK_QUEUE_LENGTH: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_DISK_SPEED_READ: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_DISK_SPEED_WRITE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_HANDLES_PROCESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_MEMORY_FREE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_MEMORY_PROCESS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_BLOCKED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_CONNECTIONS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_RETRANSMIT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_SOCKETS: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_TRAFFIC_IN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_MONITOR_NETWORK_TRAFFIC_OUT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_COMMENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_CONTRACT_SIZE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_CURRENCY: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_EXPERT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_LOGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_ORDER_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_POSITION_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_PRICE_CURRENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_PRICE_ORDER: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_PRICE_SL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_PRICE_TP: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_PRICE_TRIGGER: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_STATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_SYMBOL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_TICKET: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_TIME_EXPIRATION: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_TIME_SETUP: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_TIME_SETUP_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_TYPE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_VOLUME_CURRENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_ORDER_VOLUME_INITIAL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_COMMENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_EXPERT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_LOGIN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_PRICE_CURRENT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_PRICE_OPEN: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_PROFIT: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_REASON: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_SYMBOL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TICKET: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TIME_CREATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TIME_CREATE_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TIME_UPDATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TIME_UPDATE_ELAPSED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_TYPE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_POSITION_VOLUME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_PRICES_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_PRICES_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_PRICES_LASTTIME: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_PRICES_SYMBOL: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_CONNECTED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_CURRENT_CONNECTED: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_CURRENT_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_CURRENT_STATE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_CURRENT_TYPE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_FIRST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_ID: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_LAST: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        CONDITION_SERVER_TYPE: ClassVar[MT5Manager.MTConAutoCondition.EnConditions] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Condition: Any
    OrId: Any
    Rule: Any
    ValueBool: Any
    ValueColor: Any
    ValueDate: Any
    ValueDatetime: Any
    ValueDealEntry: Any
    ValueDealType: Any
    ValueDouble: Any
    ValueInt: Any
    ValueLanguage: Any
    ValueLeverage: Any
    ValueMoney: Any
    ValueOrderState: Any
    ValueOrderType: Any
    ValuePercent: Any
    ValuePositionType: Any
    ValueReason: Any
    ValueServer: Any
    ValueString: Any
    ValueTime: Any
    ValueType: Any
    ValueUInt: Any
    ValueVolume: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConAutoParam:
    class EnParamType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_BOOL: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_COLOR: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_DATE: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_DATETIME: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_FLOAT: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_HTML: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_INT: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_LANGUAGE: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_LEVERAGE: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_MONEY: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_NONE: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_PERCENT: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_SERVER: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_STRING: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_TIME: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_UINT: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        TYPE_VOLUME: ClassVar[MT5Manager.MTConAutoParam.EnParamType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnParams(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PARAM_ACTION_ACCOUNT_ARCHIVE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ARCHIVE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ARCHIVE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ARCHIVE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_COLOR: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_COLOR_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_COLOR_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_COLOR_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_COLOR_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_GROUP: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_GROUP_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_GROUP_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_GROUP_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CHANGE_GROUP_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CLIENT_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CLIENT_COMMENT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_CLIENT_COMMENT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_COMMENT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_COMMENT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_COMMENT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_COMMENT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_EXPERT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_EXPERT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_EXPERT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_EXPERT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_REPORTS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_REPORTS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_REPORTS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_REPORTS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRADE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRADE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRADE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRADE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRAILING_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRAILING_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRAILING_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_TRAILING_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_VPS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_VPS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_VPS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_DISABLE_VPS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_EXPERT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_EXPERT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_EXPERT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_EXPERT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_REPORTS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_REPORTS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_REPORTS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_REPORTS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRADE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRADE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRADE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRADE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRAILING_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRAILING_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRAILING_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_TRAILING_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_VPS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_VPS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_VPS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_ENABLE_VPS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_FORCE_CHANGE_PASS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_FORCE_CHANGE_PASS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_FORCE_CHANGE_PASS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_FORCE_CHANGE_PASS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_LEVERAGE: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_LEVERAGE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_LEVERAGE_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_LEVERAGE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_ACCOUNT_LEVERAGE_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CLIENT_COMMENT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CLIENT_COMMENT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_DATAFEED_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_DATAFEED_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_DATAFEED_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_DATAFEED_UPDATE_ORIGINAL: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GATEWAY_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GATEWAY_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GATEWAY_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GATEWAY_UPDATE_ORIGINAL: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GROUP_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GROUP_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_GROUP_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_ROUTING_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_ROUTING_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_ROUTING_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SERVER_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SERVER_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SERVER_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SERVER_UPDATE_ORIGINAL: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_MOVE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_MOVE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_MOVE_PATH: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_UPDATE_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_UPDATE_JSON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_CONFIG_SYMBOL_UPDATE_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_APPLICATION_CMD: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_APPLICATION_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_APPLICATION_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_APPLICATION_PATH: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_FINTEZA_EVENT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_FINTEZA_EVENT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_FINTEZA_EVENT_NAME: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_FINTEZA_EVENT_UNIT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_FINTEZA_EVENT_VALUE: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_DATA: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_HEADERS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_METHOD: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_EXTERNAL_HTTP_REQUEST_URL: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_AMOUNT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PAYOFF_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PAYOFF_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PAYOFF_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PAYOFF_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PAYOFF_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_AMOUNT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_BONUS_PERCENT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_AMOUNT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_PAYOFF_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_PAYOFF_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_PAYOFF_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_PAYOFF_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_CREDIT_PAYOFF_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_ACTION: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_AMOUNT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_ACTION: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_FINANCE_DEPOSIT_PAYOFF_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_CHANNEL_CHANNEL: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_CHANNEL_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_CHANNEL_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_CHANNEL_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_SERVER: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_SUBJ: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_TO_EMAILS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_TO_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_EMAIL_TO_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_FROM: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_SUBJ: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_TO_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_INTERNAL_TO_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_JOURNAL_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_JOURNAL_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_JOURNAL_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_PUSH_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_PUSH_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_PUSH_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_PUSH_TO_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_PUSH_TO_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_TEXT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_TO_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_TO_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_MESSAGE_SMS_TO_PHONES: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_FEED_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_FEED_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_FEED_NAME: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_GATEWAY_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_GATEWAY_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_GATEWAY_NAME: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_SERVER_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_SERVER_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_PLATFORM_RESTART_SERVER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_SYMBOLS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_SYMBOLS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_TRIGGER_ENTITY: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TP_TRIGGER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TRIGGER_ENTITY: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_SL_TRIGGER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_SYMBOLS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_TRIGGER_ENTITY: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLEAR_TP_TRIGGER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_SYMBOLS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_TRIGGER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_TRIGGER_ORDER: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_ORDERS_TYPES: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_COMMENT: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_GROUPS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_LOGINS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_PRICE: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_REASON: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_SYMBOLS: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_TRIGGER_LOGIN: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_TRIGGER_POSITION: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_ACTION_TRADE_CLOSE_POSITIONS_TYPES: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_FIRST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        PARAM_LAST: ClassVar[MT5Manager.MTConAutoParam.EnParams] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Param: Any
    ValueBool: Any
    ValueColor: Any
    ValueDate: Any
    ValueDatetime: Any
    ValueDouble: Any
    ValueHTML: Any
    ValueInt: Any
    ValueLanguage: Any
    ValueLeverage: Any
    ValueMoney: Any
    ValuePercent: Any
    ValueServer: Any
    ValueString: Any
    ValueTime: Any
    ValueType: Any
    ValueUInt: Any
    ValueVolume: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConAutomation:
    class EnFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ALL: ClassVar[MT5Manager.MTConAutomation.EnFlags] = ...
        FLAG_ENABLED: ClassVar[MT5Manager.MTConAutomation.EnFlags] = ...
        FLAG_FOLDER: ClassVar[MT5Manager.MTConAutomation.EnFlags] = ...
        FLAG_NONE: ClassVar[MT5Manager.MTConAutomation.EnFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTriggerMonthDays(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRIGGER_MONTHDAY_1: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_10: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_11: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_12: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_13: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_14: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_15: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_16: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_17: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_18: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_19: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_2: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_20: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_21: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_22: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_23: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_24: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_25: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_26: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_27: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_28: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_29: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_3: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_30: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_31: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_4: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_5: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_6: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_7: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_8: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_9: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_ALL: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        TRIGGER_MONTHDAY_NONE: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonthDays] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTriggerMonths(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRIGGER_MONTHS_ALL: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_APR: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_AUG: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_DEC: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_FEB: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_JAN: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_JUL: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_JUN: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_MAR: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_MAY: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_NONE: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_NOV: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_OCT: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        TRIGGER_MONTHS_SEP: ClassVar[MT5Manager.MTConAutomation.EnTriggerMonths] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTriggerWeekdays(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRIGGER_WEEKDAY_ALL: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_FRI: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_MON: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_NONE: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_SAT: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_SUN: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_THU: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_TUE: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        TRIGGER_WEEKDAY_WED: ClassVar[MT5Manager.MTConAutomation.EnTriggerWeekdays] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTriggers(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRIGGER_ACCOUNT_CREATE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_ACCOUNT_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_ACCOUNT_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_AUTHORIZE_FAIL: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_LOGIN: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_LOGIN_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_CONNECTIONS_LOGOUT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_DATAFEED_CONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_DATAFEED_DISCONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_DATAFEED_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_DATAFEED_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_EXTERNAL_API: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_EXTERNAL_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_EXTERNAL_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_EXTERNAL_WEBCALLBACK: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_CREDIT_IN: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_CREDIT_IN_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_CREDIT_OUT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_DEPOSIT_IN: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_DEPOSIT_IN_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_DEPOSIT_OUT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_DEPOSIT_OUT_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FINANCE_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_GATEWAY_CONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_GATEWAY_DISCONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_GATEWAY_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_GATEWAY_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_KYC_CONFIRM: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_KYC_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_KYC_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_KYC_REJECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_KYC_START: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_CLIENT_READ: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_CLIENT_SEND: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_EMAIL_FAIL: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_MESSENGER_FAIL: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_MESSAGE_SMS_FAIL: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_CONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_DISCONNECT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_FAILOVER: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PLATFORM_MONITOR: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_DELAYED: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_GAP_FINISHED: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_GAP_STARTED: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_PRICES_RESUMED: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_ACCOUNTS: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_ORDERS: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_POSITIONS: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_SCHEDULE_SCHEDULE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_FIRST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_LAST: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_MARGIN_CALL: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_POSITION_CLOSE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_POSITION_DECREASE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_POSITION_INCREASE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_POSITION_OPEN: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_POSITION_REVERSE: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_REQUEST_TIMEOUT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        TRIGGER_TRADE_STOP_OUT: ClassVar[MT5Manager.MTConAutomation.EnTriggers] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    EventPauseDays: Any
    EventPauseHours: Any
    EventPauseMinutes: Any
    EventRepeats: Any
    Flags: Any
    ID: Any
    Name: Any
    ParentID: Any
    TimeExpire: Any
    TimeMonthdays: Any
    TimeMonths: Any
    TimeStart: Any
    TimeWeekdays: Any
    Trigger: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ActionAdd(self, action) -> Any: ...
    def ActionClear(self) -> Any: ...
    def ActionDelete(self, pos) -> Any: ...
    def ActionGet(self) -> Any: ...
    def ActionNext(self, pos) -> Any: ...
    def ActionSet(self, action_list) -> Any: ...
    def ActionShift(self, pos, shift) -> Any: ...
    def ActionTotal(self) -> Any: ...
    def ActionUpdate(self, pos, action) -> Any: ...
    def ConditionAdd(self, condition) -> Any: ...
    def ConditionClear(self) -> Any: ...
    def ConditionDelete(self, pos) -> Any: ...
    def ConditionGet(self) -> Any: ...
    def ConditionNext(self, pos) -> Any: ...
    def ConditionSet(self, condition_list) -> Any: ...
    def ConditionShift(self, pos, shift) -> Any: ...
    def ConditionTotal(self) -> Any: ...
    def ConditionUpdate(self, pos, condition) -> Any: ...

class MTConBackupFolder:
    Filter: Any
    Flags: Any
    Folder: Any
    Masks: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConCommTier:
    class EnCommissionMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_FIRST: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_LAST: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_MONEY_DEPOSIT: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_MONEY_SPECIFIED: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_MONEY_SYMBOL_BASE: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_MONEY_SYMBOL_MARGIN: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_MONEY_SYMBOL_PROFIT: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_PERCENT: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_PERCENT_PROFIT: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        COMM_PIPS: ClassVar[MT5Manager.MTConCommTier.EnCommissionMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommissionVolumeType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_TYPE_DEAL: ClassVar[MT5Manager.MTConCommTier.EnCommissionVolumeType] = ...
        COMM_TYPE_FIRST: ClassVar[MT5Manager.MTConCommTier.EnCommissionVolumeType] = ...
        COMM_TYPE_LAST: ClassVar[MT5Manager.MTConCommTier.EnCommissionVolumeType] = ...
        COMM_TYPE_VOLUME: ClassVar[MT5Manager.MTConCommTier.EnCommissionVolumeType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Currency: Any
    Maximal: Any
    Minimal: Any
    Mode: Any
    RangeFrom: Any
    RangeTo: Any
    Type: Any
    Value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTConCommission:
    class EnCommActionMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_ACTION_ALL: ClassVar[MT5Manager.MTConCommission.EnCommActionMode] = ...
        COMM_ACTION_BUY: ClassVar[MT5Manager.MTConCommission.EnCommActionMode] = ...
        COMM_ACTION_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommActionMode] = ...
        COMM_ACTION_LAST: ClassVar[MT5Manager.MTConCommission.EnCommActionMode] = ...
        COMM_ACTION_SELL: ClassVar[MT5Manager.MTConCommission.EnCommActionMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommChargeMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_CHARGE_DAILY: ClassVar[MT5Manager.MTConCommission.EnCommChargeMode] = ...
        COMM_CHARGE_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommChargeMode] = ...
        COMM_CHARGE_INSTANT: ClassVar[MT5Manager.MTConCommission.EnCommChargeMode] = ...
        COMM_CHARGE_LAST: ClassVar[MT5Manager.MTConCommission.EnCommChargeMode] = ...
        COMM_CHARGE_MONTHLY: ClassVar[MT5Manager.MTConCommission.EnCommChargeMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommEntryMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_ENTRY_ALL: ClassVar[MT5Manager.MTConCommission.EnCommEntryMode] = ...
        COMM_ENTRY_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommEntryMode] = ...
        COMM_ENTRY_IN: ClassVar[MT5Manager.MTConCommission.EnCommEntryMode] = ...
        COMM_ENTRY_LAST: ClassVar[MT5Manager.MTConCommission.EnCommEntryMode] = ...
        COMM_ENTRY_OUT: ClassVar[MT5Manager.MTConCommission.EnCommEntryMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_AGENT: ClassVar[MT5Manager.MTConCommission.EnCommMode] = ...
        COMM_FEE: ClassVar[MT5Manager.MTConCommission.EnCommMode] = ...
        COMM_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommMode] = ...
        COMM_LAST: ClassVar[MT5Manager.MTConCommission.EnCommMode] = ...
        COMM_STANDARD: ClassVar[MT5Manager.MTConCommission.EnCommMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommProfitMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_PROFIT_ALL: ClassVar[MT5Manager.MTConCommission.EnCommProfitMode] = ...
        COMM_PROFIT_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommProfitMode] = ...
        COMM_PROFIT_LAST: ClassVar[MT5Manager.MTConCommission.EnCommProfitMode] = ...
        COMM_PROFIT_LOSS: ClassVar[MT5Manager.MTConCommission.EnCommProfitMode] = ...
        COMM_PROFIT_PROFIT: ClassVar[MT5Manager.MTConCommission.EnCommProfitMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommRangeMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_RANGE_FIRST: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_LAST: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_PROFIT: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_TURNOVER_MONEY: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_TURNOVER_VOLUME: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_VALUE: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        COMM_RANGE_VOLUME: ClassVar[MT5Manager.MTConCommission.EnCommRangeMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnCommReasonFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        COMM_REASON_FLAG_ALL: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_CLIENT: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_DEALER: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_EXPERT: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_EXTERNAL_CLIENT: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_MOBILE: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_NONE: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_SIGNAL: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        COMM_REASON_FLAG_WEB: ClassVar[MT5Manager.MTConCommission.EnCommReasonFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ActionMode: Any
    ChargeMode: Any
    Description: Any
    EntryMode: Any
    Mode: Any
    Name: Any
    Path: Any
    ProfitMode: Any
    RangeMode: Any
    ReasonFlags: Any
    TurnoverCurrency: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def TierAdd(self, tier) -> Any: ...
    def TierClear(self) -> Any: ...
    def TierDelete(self, pos) -> Any: ...
    def TierGet(self) -> Any: ...
    def TierNext(self, pos) -> Any: ...
    def TierSet(self, tier_list) -> Any: ...
    def TierShift(self, pos, shift) -> Any: ...
    def TierTotal(self) -> Any: ...
    def TierUpdate(self, pos, tier) -> Any: ...

class MTConCommon:
    class EnUpdateMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        UPDATE_DISABLE: ClassVar[MT5Manager.MTConCommon.EnUpdateMode] = ...
        UPDATE_ENABLE: ClassVar[MT5Manager.MTConCommon.EnUpdateMode] = ...
        UPDATE_ENABLE_BETA: ClassVar[MT5Manager.MTConCommon.EnUpdateMode] = ...
        UPDATE_FIRST: ClassVar[MT5Manager.MTConCommon.EnUpdateMode] = ...
        UPDATE_LAST: ClassVar[MT5Manager.MTConCommon.EnUpdateMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AccountDepositURL: Any
    AccountURL: Any
    AccountWithdrawalURL: Any
    ExpirationLicense: Any
    ExpirationSupport: Any
    LimitAccounts: Any
    LimitDeals: Any
    LimitGroups: Any
    LimitSymbols: Any
    LimitTradeServers: Any
    LimitWebServers: Any
    LiveUpdateMode: Any
    Name: Any
    NameFull: Any
    Owner: Any
    OwnerEmail: Any
    OwnerHost: Any
    OwnerID: Any
    Product: Any
    TotalDeals: Any
    TotalOrders: Any
    TotalOrdersHistory: Any
    TotalPositions: Any
    TotalUsers: Any
    TotalUsersReal: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTConCondition:
    class EnConditionRule(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RULE_EQ: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_FIRST: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_GREATER: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_LAST: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_LESS: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_NOT_EQ: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_NOT_GREATER: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        RULE_NOT_LESS: ClassVar[MT5Manager.MTConCondition.EnConditionRule] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnConditionType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_BOOL: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_COLOR: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_DATETIME: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_DOUBLE: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_INT: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_LEVERAGE: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_MONEY: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_NONE: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_STRING: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_TIME: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_UINT: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_VOLUME: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        TYPE_WEEKDAY: ClassVar[MT5Manager.MTConCondition.EnConditionType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnRouteCondition(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        CONDITION_BALANCE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_CITY: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_COLOR: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_COMMENT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_COMMENT_CLIENT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_COUNTRY: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_DAILY_DEALS: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_DAILY_DEALS_PERIOD: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_DAILY_PROFIT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_DATETIME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_DEALER_LOGIN: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_EQUITY: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_EXPERT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_FIRST: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_GAP: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_GROUP: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_LAST: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_LEVERAGE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_LOGIN: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_MARGIN: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_MARGIN_FREE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_MARGIN_LEVEL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_MARKET_DEVIATION: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_MARKET_DEVIATION_SPR: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_ENTRY_IN: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_ENTRY_OUT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_SL_TOUCHED: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_TOTAL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_TOTAL_SYMBOL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ORDER_TP_TOUCHED: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_AGE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_AVERAGE_TIME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_MODIFY_TIME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_PROFIT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_SL_TOUCHED: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_TOTAL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_TOTAL_SYMBOL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_TP_TOUCHED: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_POSITION_VOLUME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_PRICE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_PROFIT: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_SIGNAL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_SOURCE_LOGIN: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_SYMBOL: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_SYMBOL_SPREAD: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_TIME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_VOLUME: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_WEEKDAY: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        CONDITION_ZIPCODE: ClassVar[MT5Manager.MTConCondition.EnRouteCondition] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Condition: Any
    Rule: Any
    ValueBool: Any
    ValueColor: Any
    ValueDatetime: Any
    ValueDouble: Any
    ValueInt: Any
    ValueLeverage: Any
    ValueMoney: Any
    ValueString: Any
    ValueTime: Any
    ValueType: Any
    ValueUInt: Any
    ValueVolume: Any
    ValueVolumeExt: Any
    ValueWeekDay: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConEmail:
    class EnFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ALL: ClassVar[MT5Manager.MTConEmail.EnFlags] = ...
        FLAG_DEFAULT: ClassVar[MT5Manager.MTConEmail.EnFlags] = ...
        FLAG_ENABLED: ClassVar[MT5Manager.MTConEmail.EnFlags] = ...
        FLAG_FIRST: ClassVar[MT5Manager.MTConEmail.EnFlags] = ...
        FLAG_NONE: ClassVar[MT5Manager.MTConEmail.EnFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    Login: Any
    Name: Any
    Password: Any
    SenderMail: Any
    SenderName: Any
    Server: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConFeeder:
    class EnFeedersFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FEED_FLAG_ALL: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_IMPORT_SYMBOLS: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_INTERNAL: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_NEWS: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_NONE: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_QUOTES: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_REMOTE: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        FEED_FLAG_TRIAL: ClassVar[MT5Manager.MTConFeeder.EnFeedersFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnFeedersMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FEEDER_DISABLED: ClassVar[MT5Manager.MTConFeeder.EnFeedersMode] = ...
        FEEDER_ENABLED: ClassVar[MT5Manager.MTConFeeder.EnFeedersMode] = ...
        FEEDER_FIRST: ClassVar[MT5Manager.MTConFeeder.EnFeedersMode] = ...
        FEEDER_LAST: ClassVar[MT5Manager.MTConFeeder.EnFeedersMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Categories: Any
    FeedLogin: Any
    FeedPassword: Any
    FeedServer: Any
    Flags: Any
    GatewayLogin: Any
    GatewayPassword: Any
    GatewayServer: Any
    Keywords: Any
    Mode: Any
    Module: Any
    Name: Any
    StateConnected: Any
    StateReceivedBooks: Any
    StateReceivedNews: Any
    StateReceivedTicks: Any
    StateTrafficIn: Any
    StateTrafficOut: Any
    TimeoutAttempts: Any
    TimeoutReconnect: Any
    TimeoutSleep: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ParameterAdd(self, *args, **kwargs) -> Any: ...
    def ParameterClear(self, *args, **kwargs) -> Any: ...
    def ParameterDelete(self, *args, **kwargs) -> Any: ...
    def ParameterGet(self, *args, **kwargs) -> Any: ...
    def ParameterNext(self, *args, **kwargs) -> Any: ...
    def ParameterSet(self, *args, **kwargs) -> Any: ...
    def ParameterShift(self, *args, **kwargs) -> Any: ...
    def ParameterTotal(self, *args, **kwargs) -> Any: ...
    def ParameterUpdate(self, *args, **kwargs) -> Any: ...
    def SymbolAdd(self, *args, **kwargs) -> Any: ...
    def SymbolClear(self, *args, **kwargs) -> Any: ...
    def SymbolDelete(self, *args, **kwargs) -> Any: ...
    def SymbolNext(self, *args, **kwargs) -> Any: ...
    def SymbolShift(self, *args, **kwargs) -> Any: ...
    def SymbolTotal(self, *args, **kwargs) -> Any: ...
    def SymbolUpdate(self, *args, **kwargs) -> Any: ...
    def TranslateAdd(self, *args, **kwargs) -> Any: ...
    def TranslateClear(self, *args, **kwargs) -> Any: ...
    def TranslateDelete(self, *args, **kwargs) -> Any: ...
    def TranslateGet(self, *args, **kwargs) -> Any: ...
    def TranslateNext(self, *args, **kwargs) -> Any: ...
    def TranslateSet(self, *args, **kwargs) -> Any: ...
    def TranslateShift(self, *args, **kwargs) -> Any: ...
    def TranslateTotal(self, *args, **kwargs) -> Any: ...
    def TranslateUpdate(self, *args, **kwargs) -> Any: ...

class MTConFeederModule:
    class EnFeedersFieldFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FEED_FIELD_ALL: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        FEED_FIELD_LOGIN: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        FEED_FIELD_NONE: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        FEED_FIELD_PARAM: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        FEED_FIELD_PASS: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        FEED_FIELD_SERVER: ClassVar[MT5Manager.MTConFeederModule.EnFeedersFieldFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Description: Any
    FeedLogin: Any
    FeedPassword: Any
    FeedServer: Any
    Fields: Any
    Modes: Any
    Module: Any
    Name: Any
    Vendor: Any
    Version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ParameterGet(self, *args, **kwargs) -> Any: ...
    def ParameterNext(self, *args, **kwargs) -> Any: ...
    def ParameterTotal(self, *args, **kwargs) -> Any: ...

class MTConFeederTranslate:
    AskMarkup: Any
    BidMarkup: Any
    Digits: Any
    Source: Any
    Symbol: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConFirewall:
    class EnAction(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACCESS_BLOCK: ClassVar[MT5Manager.MTConFirewall.EnAction] = ...
        ACCESS_FIRST: ClassVar[MT5Manager.MTConFirewall.EnAction] = ...
        ACCESS_LAST: ClassVar[MT5Manager.MTConFirewall.EnAction] = ...
        ACCESS_PERMIT: ClassVar[MT5Manager.MTConFirewall.EnAction] = ...
        ACCESS_WHITELIST: ClassVar[MT5Manager.MTConFirewall.EnAction] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    Comment: Any
    From: Any
    To: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConGateway:
    class EnGatewayFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        GATEWAY_FLAG_ALL: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_EXTENDED_LOG: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_IGNORE_QUOTES: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_IMPORT_BALANCES: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_IMPORT_SYMBOLS: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_INTERNAL: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_NONE: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_PROFILLING: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_REMOTE: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_SUPP_POSITIONS: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        GATEWAY_FLAG_TRIAL: ClassVar[MT5Manager.MTConGateway.EnGatewayFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnGatewayMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        GATEWAY_DISABLED: ClassVar[MT5Manager.MTConGateway.EnGatewayMode] = ...
        GATEWAY_ENABLED: ClassVar[MT5Manager.MTConGateway.EnGatewayMode] = ...
        GATEWAY_FIRST: ClassVar[MT5Manager.MTConGateway.EnGatewayMode] = ...
        GATEWAY_LAST: ClassVar[MT5Manager.MTConGateway.EnGatewayMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    Gateway: Any
    GatewayLogin: Any
    GatewayPassword: Any
    GatewayServer: Any
    ID: Any
    Mode: Any
    Module: Any
    Name: Any
    StateConnected: Any
    StateReceivedBooks: Any
    StateReceivedTicks: Any
    StateTradesAverageTime: Any
    StateTradesTotal: Any
    StateTrafficIn: Any
    StateTrafficOut: Any
    TimeoutAttempts: Any
    TimeoutReconnect: Any
    TimeoutSleep: Any
    TradingLogin: Any
    TradingPassword: Any
    TradingServer: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def GroupAdd(self, group) -> Any: ...
    def GroupClear(self) -> Any: ...
    def GroupDelete(self, pos) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupShift(self, pos, shift) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUpdate(self, pos, group) -> Any: ...
    def ParameterAdd(self, parameter) -> Any: ...
    def ParameterClear(self) -> Any: ...
    def ParameterDelete(self, pos) -> Any: ...
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterSet(self, parameter_list) -> Any: ...
    def ParameterShift(self, pos, shift) -> Any: ...
    def ParameterTotal(self) -> Any: ...
    def ParameterUpdate(self, pos, parameter) -> Any: ...
    def SymbolAdd(self, symbol) -> Any: ...
    def SymbolClear(self) -> Any: ...
    def SymbolDelete(self, pos) -> Any: ...
    def SymbolNext(self, pos) -> Any: ...
    def SymbolShift(self, pos, shift) -> Any: ...
    def SymbolTotal(self) -> Any: ...
    def SymbolUpdate(self, pos, symbol) -> Any: ...
    def TranslateAdd(self, parameter) -> Any: ...
    def TranslateClear(self) -> Any: ...
    def TranslateDelete(self, pos) -> Any: ...
    def TranslateGet(self) -> Any: ...
    def TranslateGetSource(self, source) -> Any: ...
    def TranslateNext(self, pos) -> Any: ...
    def TranslateSet(self, parameter_list) -> Any: ...
    def TranslateShift(self, pos, shift) -> Any: ...
    def TranslateTotal(self) -> Any: ...
    def TranslateUpdate(self, pos, parameter) -> Any: ...

class MTConGatewayModule:
    class EnGatewayFieldMask(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        GATEWAY_FIELD_ALL: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        GATEWAY_FIELD_LOGIN: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        GATEWAY_FIELD_NONE: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        GATEWAY_FIELD_PARAM: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        GATEWAY_FIELD_PASS: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        GATEWAY_FIELD_SERVER: ClassVar[MT5Manager.MTConGatewayModule.EnGatewayFieldMask] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Description: Any
    Fields: Any
    Flags: Any
    Gateway: Any
    Module: Any
    Name: Any
    TradingLogin: Any
    TradingPassword: Any
    TradingServer: Any
    Vendor: Any
    Version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def ParameterGet(self, name) -> Any: ...
    @overload
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterTotal(self) -> Any: ...

class MTConGatewayTranslate:
    AskMarkup: Any
    BidMarkup: Any
    Digits: Any
    Source: Any
    Symbol: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConGroup:
    class EnAuthMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        AUTH_FIRST: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        AUTH_LAST: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        AUTH_RSA1024: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        AUTH_RSA2048: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        AUTH_RSA_CUSTOM: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        AUTH_STANDARD: ClassVar[MT5Manager.MTConGroup.EnAuthMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnAuthOTPMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        AUTH_OTP_DISABLED: ClassVar[MT5Manager.MTConGroup.EnAuthOTPMode] = ...
        AUTH_OTP_FIRST: ClassVar[MT5Manager.MTConGroup.EnAuthOTPMode] = ...
        AUTH_OTP_LAST: ClassVar[MT5Manager.MTConGroup.EnAuthOTPMode] = ...
        AUTH_OTP_TOTP_SHA256: ClassVar[MT5Manager.MTConGroup.EnAuthOTPMode] = ...
        AUTH_OTP_TOTP_SHA256_WEB: ClassVar[MT5Manager.MTConGroup.EnAuthOTPMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnFreeMarginMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FREE_MARGIN_FIRST: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        FREE_MARGIN_LAST: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        FREE_MARGIN_LOSS: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        FREE_MARGIN_NOT_USE_PL: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        FREE_MARGIN_PROFIT: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        FREE_MARGIN_USE_PL: ClassVar[MT5Manager.MTConGroup.EnFreeMarginMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnHistoryLimit(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRADE_HISTORY_ALL: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_FIRST: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_LAST: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_MONTHS_1: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_MONTHS_3: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_MONTHS_6: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_YEAR_1: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_YEAR_2: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        TRADE_HISTORY_YEAR_3: ClassVar[MT5Manager.MTConGroup.EnHistoryLimit] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMailMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MAIL_MODE_DISABLED: ClassVar[MT5Manager.MTConGroup.EnMailMode] = ...
        MAIL_MODE_FIRST: ClassVar[MT5Manager.MTConGroup.EnMailMode] = ...
        MAIL_MODE_FULL: ClassVar[MT5Manager.MTConGroup.EnMailMode] = ...
        MAIL_MODE_LAST: ClassVar[MT5Manager.MTConGroup.EnMailMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMarginFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MARGIN_FLAGS_ALL: ClassVar[MT5Manager.MTConGroup.EnMarginFlags] = ...
        MARGIN_FLAGS_CLEAR_ACC: ClassVar[MT5Manager.MTConGroup.EnMarginFlags] = ...
        MARGIN_FLAGS_NONE: ClassVar[MT5Manager.MTConGroup.EnMarginFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMarginFreeProfitMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FREE_MARGIN_PROFIT_FIRST: ClassVar[MT5Manager.MTConGroup.EnMarginFreeProfitMode] = ...
        FREE_MARGIN_PROFIT_LAST: ClassVar[MT5Manager.MTConGroup.EnMarginFreeProfitMode] = ...
        FREE_MARGIN_PROFIT_LOSS: ClassVar[MT5Manager.MTConGroup.EnMarginFreeProfitMode] = ...
        FREE_MARGIN_PROFIT_PL: ClassVar[MT5Manager.MTConGroup.EnMarginFreeProfitMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMarginMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MARGIN_MODE_EXCHANGE_DISCOUNT: ClassVar[MT5Manager.MTConGroup.EnMarginMode] = ...
        MARGIN_MODE_FIRST: ClassVar[MT5Manager.MTConGroup.EnMarginMode] = ...
        MARGIN_MODE_LAST: ClassVar[MT5Manager.MTConGroup.EnMarginMode] = ...
        MARGIN_MODE_RETAIL: ClassVar[MT5Manager.MTConGroup.EnMarginMode] = ...
        MARGIN_MODE_RETAIL_HEDGED: ClassVar[MT5Manager.MTConGroup.EnMarginMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnNewsMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        NEWS_MODE_DISABLED: ClassVar[MT5Manager.MTConGroup.EnNewsMode] = ...
        NEWS_MODE_FIRST: ClassVar[MT5Manager.MTConGroup.EnNewsMode] = ...
        NEWS_MODE_FULL: ClassVar[MT5Manager.MTConGroup.EnNewsMode] = ...
        NEWS_MODE_HEADERS: ClassVar[MT5Manager.MTConGroup.EnNewsMode] = ...
        NEWS_MODE_LAST: ClassVar[MT5Manager.MTConGroup.EnNewsMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPermissionsFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PERMISSION_ALL: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_CERT_CONFIRM: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_ENABLE_CONNECTION: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_FORCED_OTP_USAGE: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_NONE: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_NOTIFY_ALL: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_NOTIFY_BALANCES: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_NOTIFY_DEALS: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_NOTIFY_ORDERS: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_REGULATION_PROTECT: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_RESET_PASSWORD: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        PERMISSION_RISK_WARNING: ClassVar[MT5Manager.MTConGroup.EnPermissionsFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnReportsFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        REPORTSFLAGS_ALL: ClassVar[MT5Manager.MTConGroup.EnReportsFlags] = ...
        REPORTSFLAGS_EMAIL: ClassVar[MT5Manager.MTConGroup.EnReportsFlags] = ...
        REPORTSFLAGS_NONE: ClassVar[MT5Manager.MTConGroup.EnReportsFlags] = ...
        REPORTSFLAGS_STATEMENTS: ClassVar[MT5Manager.MTConGroup.EnReportsFlags] = ...
        REPORTSFLAGS_SUPPORT: ClassVar[MT5Manager.MTConGroup.EnReportsFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnReportsMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        REPORTS_DISABLED: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        REPORTS_EOD_ONLY: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        REPORTS_EOM_ONLY: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        REPORTS_FIRST: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        REPORTS_FULL: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        REPORTS_LAST: ClassVar[MT5Manager.MTConGroup.EnReportsMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnStopOutMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        STOPOUT_FIRST: ClassVar[MT5Manager.MTConGroup.EnStopOutMode] = ...
        STOPOUT_LAST: ClassVar[MT5Manager.MTConGroup.EnStopOutMode] = ...
        STOPOUT_MONEY: ClassVar[MT5Manager.MTConGroup.EnStopOutMode] = ...
        STOPOUT_PERCENT: ClassVar[MT5Manager.MTConGroup.EnStopOutMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRADEFLAGS_ALL: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_DEAL_COST: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_DEFAULT: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_EXPERTS: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_EXPIRATION: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_FIFO_CLOSE: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_HEDGE_PROHIBIT: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_NONE: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SIGNALS_ALL: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SIGNALS_OWN: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SO_COMPENSATION: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SO_COMPENSATION_CREDIT: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SO_FULLY_HEDGED: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_SWAPS: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        TRADEFLAGS_TRAILING: ClassVar[MT5Manager.MTConGroup.EnTradeFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTransferMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRANSFER_MODE_DISABLED: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        TRANSFER_MODE_FIRST: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        TRANSFER_MODE_GROUP: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        TRANSFER_MODE_LAST: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        TRANSFER_MODE_NAME: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        TRANSFER_MODE_NAME_GROUP: ClassVar[MT5Manager.MTConGroup.EnTransferMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AuthMode: Any
    AuthOTPMode: Any
    AuthPasswordMin: Any
    Company: Any
    CompanyCatalog: Any
    CompanyDepositPage: Any
    CompanyEmail: Any
    CompanyPage: Any
    CompanySupportEmail: Any
    CompanySupportPage: Any
    CompanyWithdrawalPage: Any
    Currency: Any
    CurrencyDigits: Any
    DemoDeposit: Any
    DemoInactivityPeriod: Any
    DemoLeverage: Any
    Group: Any
    LimitHistory: Any
    LimitOrders: Any
    LimitPositions: Any
    LimitSymbols: Any
    MailMode: Any
    MarginCall: Any
    MarginFlags: Any
    MarginFloatingLeverage: Any
    MarginFreeMode: Any
    MarginFreeProfitMode: Any
    MarginMode: Any
    MarginSOMode: Any
    MarginStopOut: Any
    NewsCategory: Any
    NewsMode: Any
    PermissionsFlags: Any
    ReportsEmail: Any
    ReportsFlags: Any
    ReportsMode: Any
    ReportsSMTP: Any
    ReportsSMTPLogin: Any
    ReportsSMTPPass: Any
    Server: Any
    TradeFlags: Any
    TradeInterestrate: Any
    TradeTransferMode: Any
    TradeVirtualCredit: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def CommissionAdd(self, comm) -> Any: ...
    def CommissionClear(self) -> Any: ...
    def CommissionDelete(self, pos) -> Any: ...
    @overload
    def CommissionGet(self) -> Any: ...
    @overload
    def CommissionGet(self, comm) -> Any: ...
    def CommissionNext(self, pos) -> Any: ...
    def CommissionSet(self, comm_list) -> Any: ...
    def CommissionShift(self, pos, shift) -> Any: ...
    def CommissionTotal(self) -> Any: ...
    def CommissionUpdate(self, pos, comm) -> Any: ...
    def NewsLangAdd(self, lang) -> Any: ...
    def NewsLangClear(self) -> Any: ...
    def NewsLangDelete(self, pos) -> Any: ...
    def NewsLangGet(self) -> Any: ...
    def NewsLangNext(self, pos) -> Any: ...
    def NewsLangSet(self, lang_list) -> Any: ...
    def NewsLangTotal(self) -> Any: ...
    def NewsLangUpdate(self, pos, lang) -> Any: ...
    def SymbolAdd(self, symbol) -> Any: ...
    def SymbolClear(self) -> Any: ...
    def SymbolDelete(self, pos) -> Any: ...
    def SymbolGet(self) -> Any: ...
    def SymbolNext(self, pos) -> Any: ...
    def SymbolSet(self, symbol_list) -> Any: ...
    def SymbolShift(self, pos, shift) -> Any: ...
    def SymbolTotal(self) -> Any: ...
    def SymbolUpdate(self, pos, symbol) -> Any: ...

class MTConGroupSymbol:
    class EnPermissionsFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PERMISSION_ALL: ClassVar[MT5Manager.MTConGroupSymbol.EnPermissionsFlags] = ...
        PERMISSION_BOOK: ClassVar[MT5Manager.MTConGroupSymbol.EnPermissionsFlags] = ...
        PERMISSION_DEFAULT: ClassVar[MT5Manager.MTConGroupSymbol.EnPermissionsFlags] = ...
        PERMISSION_NONE: ClassVar[MT5Manager.MTConGroupSymbol.EnPermissionsFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnREFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RE_FLAGS_ALL: ClassVar[MT5Manager.MTConGroupSymbol.EnREFlags] = ...
        RE_FLAGS_NONE: ClassVar[MT5Manager.MTConGroupSymbol.EnREFlags] = ...
        RE_FLAGS_ORDER: ClassVar[MT5Manager.MTConGroupSymbol.EnREFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    BookDepthLimit: Any
    ExecMode: Any
    ExecModeDefault: Any
    ExpirFlags: Any
    ExpirFlagsDefault: Any
    FillFlags: Any
    FillFlagsDefault: Any
    FreezeLevel: Any
    FreezeLevelDefault: Any
    IECheckMode: Any
    IECheckModeDefault: Any
    IEFlags: Any
    IEFlagsDefault: Any
    IESlipLosing: Any
    IESlipLosingDefault: Any
    IESlipProfit: Any
    IESlipProfitDefault: Any
    IETimeout: Any
    IETimeoutDefault: Any
    IEVolumeMax: Any
    IEVolumeMaxDefault: Any
    IEVolumeMaxExt: Any
    IEVolumeMaxExtDefault: Any
    MarginFlags: Any
    MarginFlagsDefault: Any
    MarginHedged: Any
    MarginHedgedDefault: Any
    MarginInitial: Any
    MarginInitialDefault: Any
    MarginLimit: Any
    MarginLimitDefault: Any
    MarginLong: Any
    MarginLongDefault: Any
    MarginMaintenance: Any
    MarginMaintenanceDefault: Any
    MarginRateCurrency: Any
    MarginRateCurrencyDefault: Any
    MarginRateInitialDefault: Any
    MarginRateLiquidity: Any
    MarginRateLiquidityDefault: Any
    MarginRateMaintenanceDefault: Any
    MarginShort: Any
    MarginShortDefault: Any
    MarginStop: Any
    MarginStopDefault: Any
    MarginStopLimit: Any
    MarginStopLimitDefault: Any
    OrderFlags: Any
    OrderFlagsDefault: Any
    Path: Any
    PermissionsFlags: Any
    REFlags: Any
    REFlagsDefault: Any
    RETimeout: Any
    RETimeoutDefault: Any
    SpreadDiff: Any
    SpreadDiffBalance: Any
    SpreadDiffBalanceDefault: Any
    SpreadDiffDefault: Any
    StopsLevel: Any
    StopsLevelDefault: Any
    SwapFlags: Any
    SwapFlagsDefault: Any
    SwapLong: Any
    SwapLongDefault: Any
    SwapMode: Any
    SwapModeDefault: Any
    SwapRateFriday: Any
    SwapRateFridayDefault: Any
    SwapRateMonday: Any
    SwapRateMondayDefault: Any
    SwapRateSaturday: Any
    SwapRateSaturdayDefault: Any
    SwapRateSunday: Any
    SwapRateSundayDefault: Any
    SwapRateThursday: Any
    SwapRateThursdayDefault: Any
    SwapRateTuesday: Any
    SwapRateTuesdayDefault: Any
    SwapRateWednesday: Any
    SwapRateWednesdayDefault: Any
    SwapShort: Any
    SwapShortDefault: Any
    SwapYearDays: Any
    SwapYearDaysDefault: Any
    TradeMode: Any
    TradeModeDefault: Any
    VolumeLimit: Any
    VolumeLimitDefault: Any
    VolumeLimitExt: Any
    VolumeLimitExtDefault: Any
    VolumeMax: Any
    VolumeMaxDefault: Any
    VolumeMaxExt: Any
    VolumeMaxExtDefault: Any
    VolumeMin: Any
    VolumeMinDefault: Any
    VolumeMinExt: Any
    VolumeMinExtDefault: Any
    VolumeStep: Any
    VolumeStepDefault: Any
    VolumeStepExt: Any
    VolumeStepExtDefault: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Default(self) -> bool: ...
    @overload
    def MarginRateInitial(self, type) -> Any: ...
    @overload
    def MarginRateInitial(self, type, rate) -> Any: ...
    def MarginRateInitialGet(self) -> Any: ...
    def MarginRateInitialSet(self, rate_dict) -> Any: ...
    @overload
    def MarginRateMaintenance(self, type) -> Any: ...
    @overload
    def MarginRateMaintenance(self, type, rate) -> Any: ...
    def MarginRateMaintenanceGet(self) -> Any: ...
    def MarginRateMaintenanceSet(self, rate_dict) -> Any: ...

class MTConHistorySync:
    class EnHistoryData(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        DATA_HISTORY_ALL: ClassVar[MT5Manager.MTConHistorySync.EnHistoryData] = ...
        DATA_HISTORY_CHARTS: ClassVar[MT5Manager.MTConHistorySync.EnHistoryData] = ...
        DATA_HISTORY_FIRST: ClassVar[MT5Manager.MTConHistorySync.EnHistoryData] = ...
        DATA_HISTORY_LAST: ClassVar[MT5Manager.MTConHistorySync.EnHistoryData] = ...
        DATA_HISTORY_TICKS: ClassVar[MT5Manager.MTConHistorySync.EnHistoryData] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnHistoryMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        HISTORY_DISABLED: ClassVar[MT5Manager.MTConHistorySync.EnHistoryMode] = ...
        HISTORY_ENABLED: ClassVar[MT5Manager.MTConHistorySync.EnHistoryMode] = ...
        HISTORY_FIRST: ClassVar[MT5Manager.MTConHistorySync.EnHistoryMode] = ...
        HISTORY_LAST: ClassVar[MT5Manager.MTConHistorySync.EnHistoryMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnHistorySyncFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ALL: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncFlags] = ...
        FLAG_NONE: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncFlags] = ...
        FLAG_SESSIONS: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncFlags] = ...
        FLAG_SYNONYMS: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnHistorySyncMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MODE_FIRST: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncMode] = ...
        MODE_LAST: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncMode] = ...
        MODE_MERGE: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncMode] = ...
        MODE_REPLACE: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnHistorySyncServer(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SERVER_FIRST: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncServer] = ...
        SERVER_LAST: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncServer] = ...
        SERVER_MT4: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncServer] = ...
        SERVER_MT5: ClassVar[MT5Manager.MTConHistorySync.EnHistorySyncServer] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    From: Any
    HistoryData: Any
    Login: Any
    Mode: Any
    ModeSync: Any
    Password: Any
    Server: Any
    ServerType: Any
    TimeCorrection: Any
    To: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def SymbolAdd(self, symbol) -> Any: ...
    def SymbolDelete(self, pos) -> Any: ...
    def SymbolNext(self, pos) -> Any: ...
    def SymbolShift(self, pos, shift) -> Any: ...
    def SymbolTotal(self) -> Any: ...
    def SymbolUpdate(self, pos, symbol) -> Any: ...

class MTConHoliday:
    class EnHolidayMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        HOLIDAY_DISABLED: ClassVar[MT5Manager.MTConHoliday.EnHolidayMode] = ...
        HOLIDAY_ENABLED: ClassVar[MT5Manager.MTConHoliday.EnHolidayMode] = ...
        HOLIDAY_FIRST: ClassVar[MT5Manager.MTConHoliday.EnHolidayMode] = ...
        HOLIDAY_LAST: ClassVar[MT5Manager.MTConHoliday.EnHolidayMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Day: Any
    Description: Any
    Mode: Any
    Month: Any
    WorkFrom: Any
    WorkFromHours: Any
    WorkFromMinutes: Any
    WorkTo: Any
    WorkToHours: Any
    WorkToMinutes: Any
    Year: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def SymbolAdd(self, symbol) -> Any: ...
    def SymbolClear(self) -> Any: ...
    def SymbolDelete(self, pos) -> Any: ...
    def SymbolGet(self) -> Any: ...
    def SymbolNext(self, pos) -> Any: ...
    def SymbolSet(self, symbol_list) -> Any: ...
    def SymbolShift(self, pos, shift) -> Any: ...
    def SymbolTotal(self) -> Any: ...
    def SymbolUpdate(self, pos, symbol) -> Any: ...

class MTConLeverage:
    Name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> Any: ...
    def RuleAdd(self, rule) -> Any: ...
    def RuleClear(self) -> Any: ...
    def RuleDelete(self, pos) -> Any: ...
    def RuleGet(self, name) -> Any: ...
    def RuleNext(self, pos) -> Any: ...
    def RuleShift(self, pos, shift) -> Any: ...
    def RuleTotal(self) -> Any: ...
    def RuleUpdate(self, pos, rule) -> Any: ...

class MTConLeverageRule:
    class EnRangeMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RANGE_FIRST: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        RANGE_LAST: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        RANGE_VALUE: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        RANGE_VALUE_PER_SYMBOL: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        RANGE_VOLUME: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        RANGE_VOLUME_PER_SYMBOL: ClassVar[MT5Manager.MTConLeverageRule.EnRangeMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Description: Any
    Name: Any
    Path: Any
    RangeMode: Any
    RangeValueCurrency: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def TierAdd(self, tier) -> Any: ...
    def TierClear(self) -> Any: ...
    def TierDelete(self, pos) -> Any: ...
    def TierGet(self) -> Any: ...
    def TierNext(self, pos) -> Any: ...
    def TierSet(self, tier_list) -> Any: ...
    def TierShift(self, pos, shift) -> Any: ...
    def TierTotal(self) -> Any: ...
    def TierUpdate(self, pos, tier) -> Any: ...

class MTConLeverageTier:
    MarginRateInitial: Any
    MarginRateMaintenance: Any
    RangeFrom: Any
    RangeTo: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTConManager:
    class EnManagerLimit(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MANAGER_LIMIT_ALL: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_FIRST: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_LAST: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_MONTHS_1: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_MONTHS_3: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_MONTHS_6: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_YEAR_1: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_YEAR_2: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        MANAGER_LIMIT_YEAR_3: ClassVar[MT5Manager.MTConManager.EnManagerLimit] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnManagerRightFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RIGHT_FLAGS_ALL: ClassVar[MT5Manager.MTConManager.EnManagerRightFlags] = ...
        RIGHT_FLAGS_DENIED: ClassVar[MT5Manager.MTConManager.EnManagerRightFlags] = ...
        RIGHT_FLAGS_GRANTED: ClassVar[MT5Manager.MTConManager.EnManagerRightFlags] = ...
        RIGHT_FLAGS_NONE: ClassVar[MT5Manager.MTConManager.EnManagerRightFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnManagerRights(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        RIGHT_ACCOUNTANT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_DETAILS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_MANAGER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_ONLINE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_READ: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_TECHNICAL: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ACC_TECHNICAL_MODIFY: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ADMIN: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_ADMIN_COMPUTER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_ALLOCATIONS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_AUTOMATIONS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_CORPORATES: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_DATAFEEDS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_ECN: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_FUNDS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_GATEWAYS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_GROUPS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_HOLIDAYS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_HST_SYNC: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_KYC: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_MAILS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_MANAGERS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_MESSENGERS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_PAYMENTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_PLUGINS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_REPORTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_REQUESTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_SERVERS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_SYMBOLS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_TIME: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_VPS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CFG_WEB_SERVICES: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CHARTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CLIENTS_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CLIENTS_CREATE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CLIENTS_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CLIENTS_EDIT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CLIENTS_KYC: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_COMMENTS_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_COMMENTS_CREATE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_COMMENTS_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_CONFIRM_ACTIONS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_CREATE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_EDIT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_FILES_ADD: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_DOCUMENTS_FILES_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_EMAIL: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_EXPORT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_FINTEZA_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_FINTEZA_CAMPAIGNS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_FINTEZA_REPORTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_FINTEZA_WEBSITES: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_FIRST: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_GRP_DETAILS_COMMISSION: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_GRP_DETAILS_MARGIN: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_LAST: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_MANAGER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_MARKET: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_NEWS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_NOTIFICATIONS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_PAYMENTS_ACCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_PAYMENTS_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_PAYMENTS_EDIT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_PAYMENTS_PROCESS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_QUOTES: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_QUOTES_RAW: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_REPORTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_RISK_MANAGER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_SRV_JOURNALS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_SRV_REPORTS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_SUBSCRIPTIONS_EDIT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_SUBSCRIPTIONS_VIEW: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_SYMBOL_DETAILS: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TECHSUPPORT: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TRADES_DEALER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TRADES_DELETE: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TRADES_MANAGER: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TRADES_READ: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        RIGHT_TRADES_SUPERVISOR: ClassVar[MT5Manager.MTConManager.EnManagerRights] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    LimitLogs: Any
    LimitReports: Any
    Login: Any
    Mailbox: Any
    Server: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AccessAdd(self, access) -> Any: ...
    def AccessDelete(self, pos) -> Any: ...
    def AccessGet(self) -> Any: ...
    def AccessNext(self, pos) -> Any: ...
    def AccessSet(self, access_list) -> Any: ...
    def AccessShift(self, pos, shift) -> Any: ...
    def AccessTotal(self) -> Any: ...
    def AccessUpdate(self, pos, access) -> Any: ...
    def Clear(self) -> bool: ...
    def GroupAdd(self, group) -> Any: ...
    def GroupDelete(self, pos) -> Any: ...
    def GroupGet(self) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupSet(self, group_list) -> Any: ...
    def GroupShift(self, pos, shift) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUpdate(self, pos, group) -> Any: ...
    @overload
    def Right(self, right) -> Any: ...
    @overload
    def Right(self, right, flag) -> Any: ...
    def RightGet(self) -> Any: ...
    def RightSet(self, right) -> Any: ...

class MTConManagerAccess:
    From: Any
    To: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConMessenger:
    class EnFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ALL: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_DEFAULT: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_ENABLED: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_FIRST: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_NONE: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_NOTIFY_CLIENTS: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        FLAG_NOTIFY_SERVICES: ClassVar[MT5Manager.MTConMessenger.EnFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnProviderType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PROVIDER_IM_FIRST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_IM_LAST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_IM_MICROSOFT_TEAMS: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_IM_SLACK: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_IM_TELEGRAM: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_PUSH_FIRST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_PUSH_LAST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_PUSH_METAQUOTES: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_PUSH_UNIVERSAL: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_BULKSMS: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_CLICKATELL: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_CMCOM: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_FIRST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_FONIVA: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_INFOBIP: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_LAST: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_TWILIO: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_VONAGE: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        PROVIDER_SMS_WEBSMS: ClassVar[MT5Manager.MTConMessenger.EnProviderType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    MessageTemplate: Any
    Name: Any
    ProviderAddress: Any
    ProviderCurrency: Any
    ProviderCurrencyRate: Any
    ProviderLogin: Any
    ProviderPassword: Any
    ProviderSubId: Any
    ProviderToken: Any
    ProviderType: Any
    Sender: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def CountryAdd(self, country) -> Any: ...
    def CountryClear(self) -> Any: ...
    def CountryDelete(self, pos) -> Any: ...
    def CountryGet(self) -> Any: ...
    def CountryNext(self, pos) -> Any: ...
    def CountrySet(self, country_list) -> Any: ...
    def CountryShift(self, pos, shift) -> Any: ...
    def CountryTotal(self) -> Any: ...
    def CountryUpdate(self, pos, country) -> Any: ...
    def GroupAdd(self, group) -> Any: ...
    def GroupClear(self) -> Any: ...
    def GroupDelete(self, pos) -> Any: ...
    def GroupGet(self) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupSet(self, group_list) -> Any: ...
    def GroupShift(self, pos, shift) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUpdate(self, pos, group) -> Any: ...

class MTConMessengerCountry:
    MessageTemplate: Any
    PhoneCode: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConMessengerGroup:
    Group: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConParam:
    class ParamType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_BOOL: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_DATE: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_DATETIME: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_FLOAT: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_GROUPS: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_INT: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_STRING: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_SYMBOLS: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        TYPE_TIME: ClassVar[MT5Manager.MTConParam.ParamType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Name: Any
    Type: Any
    Value: Any
    ValueDatetime: Any
    ValueFloat: Any
    ValueGroups: Any
    ValueInt: Any
    ValueString: Any
    ValueSymbols: Any
    ValueTime: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConPlugin:
    class EnPluginFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PLUGIN_FLAG_ALL: ClassVar[MT5Manager.MTConPlugin.EnPluginFlags] = ...
        PLUGIN_FLAG_MAN_CONFIG: ClassVar[MT5Manager.MTConPlugin.EnPluginFlags] = ...
        PLUGIN_FLAG_NONE: ClassVar[MT5Manager.MTConPlugin.EnPluginFlags] = ...
        PLUGIN_FLAG_PROFILING: ClassVar[MT5Manager.MTConPlugin.EnPluginFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPluginMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PLUGIN_DISABLED: ClassVar[MT5Manager.MTConPlugin.EnPluginMode] = ...
        PLUGIN_ENABLED: ClassVar[MT5Manager.MTConPlugin.EnPluginMode] = ...
        PLUGIN_FIRST: ClassVar[MT5Manager.MTConPlugin.EnPluginMode] = ...
        PLUGIN_LAST: ClassVar[MT5Manager.MTConPlugin.EnPluginMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    Mode: Any
    Module: Any
    Name: Any
    Server: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> Any: ...
    def ParameterAdd(self, parameter) -> Any: ...
    def ParameterClear(self) -> Any: ...
    def ParameterDelete(self, pos) -> Any: ...
    @overload
    def ParameterGet(self, name: str) -> MTConParam: ...
    @overload
    def ParameterGet(self) -> list[MTConParam]: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterSet(self, parameter_list) -> Any: ...
    def ParameterShift(self, pos, shift) -> Any: ...
    def ParameterTotal(self) -> Any: ...
    def ParameterUpdate(self, pos, parameter) -> Any: ...

class MTConPluginModule:
    Description: Any
    Module: Any
    Name: Any
    Server: Any
    Vendor: Any
    Version: Any
    VersionAPI: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def ParameterGet(self, name: str) -> Any: ...
    @overload
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterTotal(self) -> Any: ...

class MTConReport:
    class EnReportMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        REPORT_DISABLED: ClassVar[MT5Manager.MTConReport.EnReportMode] = ...
        REPORT_ENABLED: ClassVar[MT5Manager.MTConReport.EnReportMode] = ...
        REPORT_FIRST: ClassVar[MT5Manager.MTConReport.EnReportMode] = ...
        REPORT_LAST: ClassVar[MT5Manager.MTConReport.EnReportMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Mode: Any
    Module: Any
    Name: Any
    Server: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def ParameterAdd(self, parameter) -> Any: ...
    def ParameterClear(self) -> Any: ...
    def ParameterDelete(self, pos) -> Any: ...
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterSet(self, parameter_list) -> Any: ...
    def ParameterShift(self, pos, shift) -> Any: ...
    def ParameterTotal(self) -> Any: ...
    def ParameterUpdate(self, pos, parameter) -> Any: ...

class MTConReportModule:
    class EnSnapshots(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SNAPSHOT_ACCOUNTS: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_ACCOUNTS_FULL: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_FIRST: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_LAST: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_NONE: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_ORDERS: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_ORDERS_FULL: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_POSITIONS: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_POSITIONS_FULL: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_USERS: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        SNAPSHOT_USERS_FULL: ClassVar[MT5Manager.MTConReportModule.EnSnapshots] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTypes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_ALL: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        TYPE_HTML: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        TYPE_NONE: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        TYPE_TABLE: ClassVar[MT5Manager.MTConReportModule.EnTypes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Description: Any
    Index: Any
    Module: Any
    Name: Any
    Server: Any
    Snapshots: Any
    Types: Any
    Vendor: Any
    Version: Any
    VersionAPI: Any
    VersionIE: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def InputGet(self) -> Any: ...
    def InputNext(self, pos) -> Any: ...
    def InputTotal(self) -> Any: ...
    def ParameterGet(self) -> Any: ...
    def ParameterNext(self, pos) -> Any: ...
    def ParameterTotal(self) -> Any: ...

class MTConRoute:
    class EnRouteAction(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTION_CANCEL_ORDER: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_CLEAR_SL: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_CLEAR_SLTP: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_CLEAR_TP: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_CONFIRM_CLIENT: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_CONFIRM_MARKET: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_DEALER: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_DEALER_ONLINE: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_DELAY_TICK: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_DELAY_TIME: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_FIRST: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_LAST: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_REJECT: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        ACTION_REQUOTE: ClassVar[MT5Manager.MTConRoute.EnRouteAction] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnRouteFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        REQUEST_ACTIVATE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_ALL: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_CLOSE_BY: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_CLOSE_BY: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_ORD_ACTIVATE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_ORD_MODIFY: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_ORD_PENDING: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_ORD_REMOVE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_ORD_SLIMIT: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_POS_EXECUTE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_DEALER_POS_MODIFY: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_EXCHANGE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_EXPIRATION: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_FIRST: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_INSTANT: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_LAST: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_MARKET: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_MODIFY: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_NONE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_PENDING: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_PRICE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_REMOVE: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_REQUEST: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_SL: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_SLTP: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_STOPLIMIT: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_STOPOUT_ORDER: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_STOPOUT_POSITION: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        REQUEST_TP: ClassVar[MT5Manager.MTConRoute.EnRouteFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnRouteMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MODE_DISABLED: ClassVar[MT5Manager.MTConRoute.EnRouteMode] = ...
        MODE_ENABLED: ClassVar[MT5Manager.MTConRoute.EnRouteMode] = ...
        MODE_FIRST: ClassVar[MT5Manager.MTConRoute.EnRouteMode] = ...
        MODE_LAST: ClassVar[MT5Manager.MTConRoute.EnRouteMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTypeFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TYPE_ALL: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_BUY: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_BUY_LIMIT: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_BUY_STOP: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_BUY_STOP_LIMIT: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_FIRST: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_LAST: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_NONE: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_SELL: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_SELL_LIMIT: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_SELL_STOP: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        TYPE_SELL_STOP_LIMIT: ClassVar[MT5Manager.MTConRoute.EnTypeFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    Mode: Any
    Name: Any
    ParamBool: Any
    ParamColor: Any
    ParamDatetime: Any
    ParamDouble: Any
    ParamInt: Any
    ParamLeverage: Any
    ParamMoney: Any
    ParamString: Any
    ParamTime: Any
    ParamType: Any
    ParamUInt: Any
    ParamVolume: Any
    ParamVolumeExt: Any
    Request: Any
    Type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def ConditionAdd(self, condition) -> Any: ...
    def ConditionClear(self) -> Any: ...
    def ConditionDelete(self, pos) -> Any: ...
    def ConditionGet(self) -> Any: ...
    def ConditionNext(self, pos) -> Any: ...
    def ConditionSet(self, condition_list) -> Any: ...
    def ConditionShift(self, pos, shift) -> Any: ...
    def ConditionTotal(self) -> Any: ...
    def ConditionUpdate(self, pos, condition) -> Any: ...
    def DealerAdd(self, dealer) -> Any: ...
    def DealerClear(self) -> Any: ...
    def DealerDelete(self, pos) -> Any: ...
    def DealerGet(self) -> Any: ...
    def DealerNext(self, pos) -> Any: ...
    def DealerShift(self, pos, shift) -> Any: ...
    def DealerTotal(self) -> Any: ...
    def DealerUpdate(self, pos, dealer) -> Any: ...

class MTConRouteDealer:
    Login: Any
    Name: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConServer:
    class EnFailoverModes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FAILOVER_MODE_BY_ALL: ClassVar[MT5Manager.MTConServer.EnFailoverModes] = ...
        FAILOVER_MODE_BY_MOST: ClassVar[MT5Manager.MTConServer.EnFailoverModes] = ...
        FAILOVER_MODE_DISABLED: ClassVar[MT5Manager.MTConServer.EnFailoverModes] = ...
        FAILOVER_MODE_FIRST: ClassVar[MT5Manager.MTConServer.EnFailoverModes] = ...
        FAILOVER_MODE_LAST: ClassVar[MT5Manager.MTConServer.EnFailoverModes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnServerTypes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        NET_ACCESS_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_ANTIDDOS_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_BACKUP_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_HISTORY_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_MAIN_TRADE_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_OBSOLETE_SERVER_1: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_OBSOLETE_SERVER_2: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_SERVER_FIRST: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_SERVER_LAST: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        NET_TRADE_SERVER: ClassVar[MT5Manager.MTConServer.EnServerTypes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AdaptersCurrent: Any
    Address: Any
    AddressIPv6: Any
    Build: Any
    BuildDate: Any
    CPU: Any
    CPUTotal: Any
    CPUUsageCritical: Any
    CPUUsageMax: Any
    Connected: Any
    ConnectsCritical: Any
    ConnectsMax: Any
    FailoverMode: Any
    FailoverTimeout: Any
    HDDFragments: Any
    HDDFragmentsCritical: Any
    HDDFree: Any
    HDDFreeCritical: Any
    HDDSpeedRead: Any
    HDDSpeedReadCritical: Any
    HDDSpeedWrite: Any
    HDDSpeedWriteCritical: Any
    HDDTotal: Any
    Id: Any
    LastBootTime: Any
    MemoryFree: Any
    MemoryFreeCritical: Any
    MemoryFreeMin: Any
    MemoryTotal: Any
    Name: Any
    NetworkCritical: Any
    NetworkMax: Any
    OS: Any
    ServiceTime: Any
    Type: Any
    Version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AccessServer(self) -> Any: ...
    def AdaptersNext(self, pos) -> Any: ...
    def AdaptersTotal(self) -> Any: ...
    def AddressIPv6Next(self, pos) -> Any: ...
    def AddressIPv6Total(self) -> Any: ...
    def AddressNext(self, pos) -> Any: ...
    def AddressTotal(self) -> Any: ...
    def AntiDDoSServer(self) -> Any: ...
    def BackupServer(self) -> Any: ...
    def BindingsAdd(self, bindings) -> Any: ...
    def BindingsClear(self) -> Any: ...
    def BindingsDelete(self, pos) -> Any: ...
    def BindingsNext(self, pos) -> Any: ...
    def BindingsShift(self, pos, shift) -> Any: ...
    def BindingsTotal(self) -> Any: ...
    def BindingsUpdate(self, pos, bindings) -> Any: ...
    def Clear(self) -> bool: ...
    def ClusterStateGet(self, id) -> Any: ...
    def ClusterStateNext(self, pos) -> Any: ...
    def ClusterStateTotal(self) -> Any: ...
    def HistoryServer(self) -> Any: ...
    def Password(self, password) -> Any: ...
    def PasswordCheck(self, password) -> Any: ...
    def PointsAdd(self, point) -> Any: ...
    def PointsClear(self) -> Any: ...
    def PointsDelete(self, pos) -> Any: ...
    def PointsNext(self, pos) -> Any: ...
    def PointsShift(self, pos, shift) -> Any: ...
    def PointsTotal(self) -> Any: ...
    def PointsUpdate(self, pos, point) -> Any: ...
    def TradeServer(self) -> Any: ...

class MTConServerAccess:
    class EnAccessFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACCESS_FLAGS_ALL: ClassVar[MT5Manager.MTConServerAccess.EnAccessFlags] = ...
        ACCESS_FLAGS_INVISIBLE: ClassVar[MT5Manager.MTConServerAccess.EnAccessFlags] = ...
        ACCESS_FLAGS_NONE: ClassVar[MT5Manager.MTConServerAccess.EnAccessFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnAccessMask(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACCESS_ALLOW_ADMIN: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_ALL: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_CLIENT: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_MANAGER: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_MANAGER_API: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_NONE: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_RESERVED: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        ACCESS_ALLOW_WEB_API: ClassVar[MT5Manager.MTConServerAccess.EnAccessMask] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnServerPriority(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PRIORITY_FIRST: ClassVar[MT5Manager.MTConServerAccess.EnServerPriority] = ...
        PRIORITY_HIGHEST: ClassVar[MT5Manager.MTConServerAccess.EnServerPriority] = ...
        PRIORITY_IDLE: ClassVar[MT5Manager.MTConServerAccess.EnServerPriority] = ...
        PRIORITY_LAST: ClassVar[MT5Manager.MTConServerAccess.EnServerPriority] = ...
        PRIORITY_LOWEST: ClassVar[MT5Manager.MTConServerAccess.EnServerPriority] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AccessFlags: Any
    AccessMask: Any
    AntifloodConnects: Any
    AntifloodEnabled: Any
    AntifloodErrors: Any
    NewsMax: Any
    Priority: Any
    PriorityCurrent: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def BindingsAdd(self, binding) -> Any: ...
    def BindingsClear(self) -> Any: ...
    def BindingsDelete(self, pos) -> Any: ...
    def BindingsNext(self, pos) -> Any: ...
    def BindingsShift(self, pos, shift) -> Any: ...
    def BindingsTotal(self) -> Any: ...
    def BindingsUpdate(self, pos, binding) -> Any: ...
    def PointsAdd(self, point) -> Any: ...
    def PointsClear(self) -> Any: ...
    def PointsDelete(self, pos) -> Any: ...
    def PointsNext(self, pos) -> Any: ...
    def PointsShift(self, pos, shift) -> Any: ...
    def PointsTotal(self) -> Any: ...
    def PointsUpdate(self, pos, point) -> Any: ...
    def ServersAdd(self, server) -> Any: ...
    def ServersClear(self) -> Any: ...
    def ServersDelete(self, pos) -> Any: ...
    def ServersNext(self, pos) -> Any: ...
    def ServersShift(self, pos, shift) -> Any: ...
    def ServersTotal(self) -> Any: ...
    def ServersUpdate(self, pos, server) -> Any: ...

class MTConServerAntiDDoS:
    class EnAccessMask(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACCESS_ALLOW_ADMIN: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_ALL: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_CLIENT: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_CLIENT_API: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_MANAGER: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_MANAGER_API: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_NONE: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        ACCESS_ALLOW_WEB_API: ClassVar[MT5Manager.MTConServerAntiDDoS.EnAccessMask] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnServerPriority(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PRIORITY_FIRST: ClassVar[MT5Manager.MTConServerAntiDDoS.EnServerPriority] = ...
        PRIORITY_HIGHEST: ClassVar[MT5Manager.MTConServerAntiDDoS.EnServerPriority] = ...
        PRIORITY_IDLE: ClassVar[MT5Manager.MTConServerAntiDDoS.EnServerPriority] = ...
        PRIORITY_LAST: ClassVar[MT5Manager.MTConServerAntiDDoS.EnServerPriority] = ...
        PRIORITY_LOWEST: ClassVar[MT5Manager.MTConServerAntiDDoS.EnServerPriority] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AccessMask: Any
    Priority: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def PointsAdd(self, point) -> Any: ...
    def PointsClear(self) -> Any: ...
    def PointsDelete(self, pos) -> Any: ...
    def PointsNext(self, pos) -> Any: ...
    def PointsShift(self, pos, shift) -> Any: ...
    def PointsTotal(self) -> Any: ...
    def PointsUpdate(self, pos, point) -> Any: ...
    def ServersAdd(self, server) -> Any: ...
    def ServersClear(self) -> Any: ...
    def ServersDelete(self, pos) -> Any: ...
    def ServersNext(self, pos) -> Any: ...
    def ServersShift(self, pos, shift) -> Any: ...
    def ServersTotal(self) -> Any: ...
    def ServersUpdate(self, pos, server) -> Any: ...
    def SourcesAdd(self, source) -> Any: ...
    def SourcesDelete(self, pos) -> Any: ...
    def SourcesNext(self, pos) -> Any: ...
    def SourcesShift(self, pos, shift) -> Any: ...
    def SourcesTotal(self) -> Any: ...
    def SourcesUpdate(self, pos, source) -> Any: ...

class MTConServerBackup:
    class EnBackupFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FLAG_ENABLE_BACKUPS: ClassVar[MT5Manager.MTConServerBackup.EnBackupFlags] = ...
        FLAG_ENABLE_FAILOVER: ClassVar[MT5Manager.MTConServerBackup.EnBackupFlags] = ...
        FLAG_ENABLE_LOGS: ClassVar[MT5Manager.MTConServerBackup.EnBackupFlags] = ...
        FLAG_ENABLE_TICKS: ClassVar[MT5Manager.MTConServerBackup.EnBackupFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnBackupPeriod(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        BACKUP_15MINUTES: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_1DAY: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_1HOUR: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_30MINUTES: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_4HOURS: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_DISABLED: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_FIRST: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        BACKUP_LAST: ClassVar[MT5Manager.MTConServerBackup.EnBackupPeriod] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnBackupTTL(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        BACKUP_TTL_1DAY: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_1MONTH: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_1WEEK: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_3DAYS: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_3MONTHS: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_6MONTHS: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_FIRST: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        BACKUP_TTL_LAST: ClassVar[MT5Manager.MTConServerBackup.EnBackupTTL] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSQLExportFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SQL_FLAG_ALL: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportFlags] = ...
        SQL_FLAG_NONE: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportFlags] = ...
        SQL_FLAG_PARTITIONS: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportFlags] = ...
        SQL_FLAG_SKIP_DEMO: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSQLExportMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SQL_MODE_FIREBIRD: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_FIRST: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_LAST: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_MSSQL: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_MYSQL: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_NONE: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_ORACLE: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        SQL_MODE_POSTGRESQL: ClassVar[MT5Manager.MTConServerBackup.EnSQLExportMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    BackupFlags: Any
    BackupFullTime: Any
    BackupLastSync: Any
    BackupPath: Any
    BackupPeriod: Any
    BackupTTL: Any
    MasterServer: Any
    SQLExportFlags: Any
    SQLExportFolder: Any
    SQLExportLogin: Any
    SQLExportMode: Any
    SQLExportPassword: Any
    SQLExportPeriod: Any
    SQLExportServer: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def FoldersAdd(self, folder) -> Any: ...
    def FoldersClear(self) -> Any: ...
    def FoldersDelete(self, pos) -> Any: ...
    def FoldersNext(self, pos) -> Any: ...
    def FoldersShift(self, pos, shift) -> Any: ...
    def FoldersTotal(self) -> Any: ...
    def FoldersUpdate(self, pos, folder) -> Any: ...

class MTConServerHistory:
    DatafeedsTimeout: Any
    NewsMax: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConServerRange:
    From: Any
    To: Any
    UsedFrom: Any
    UsedTo: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConServerTrade:
    class EnDemoMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        DEMO_DISABLED: ClassVar[MT5Manager.MTConServerTrade.EnDemoMode] = ...
        DEMO_FIRST: ClassVar[MT5Manager.MTConServerTrade.EnDemoMode] = ...
        DEMO_FIXED: ClassVar[MT5Manager.MTConServerTrade.EnDemoMode] = ...
        DEMO_LAST: ClassVar[MT5Manager.MTConServerTrade.EnDemoMode] = ...
        DEMO_PROLONG: ClassVar[MT5Manager.MTConServerTrade.EnDemoMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOvermonthMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        OVERMONTH_FIRST: ClassVar[MT5Manager.MTConServerTrade.EnOvermonthMode] = ...
        OVERMONTH_FIRST_DAY: ClassVar[MT5Manager.MTConServerTrade.EnOvermonthMode] = ...
        OVERMONTH_LAST: ClassVar[MT5Manager.MTConServerTrade.EnOvermonthMode] = ...
        OVERMONTH_LAST_DAY: ClassVar[MT5Manager.MTConServerTrade.EnOvermonthMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOvernightDays(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        OVERNIGHT_DAYS_ALL: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_DEFAULT: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_FRI: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_MON: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_NONE: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_FRI: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_MON: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_SAT: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_SUN: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_THU: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_TUE: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_ROLLOVER_WED: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_SAT: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_SUN: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_THU: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_TUE: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        OVERNIGHT_DAYS_WED: ClassVar[MT5Manager.MTConServerTrade.EnOvernightDays] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOvernightMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        OVERNIGHT_END_DAY: ClassVar[MT5Manager.MTConServerTrade.EnOvernightMode] = ...
        OVERNIGHT_FIRST: ClassVar[MT5Manager.MTConServerTrade.EnOvernightMode] = ...
        OVERNIGHT_LAST: ClassVar[MT5Manager.MTConServerTrade.EnOvernightMode] = ...
        OVERNIGHT_START_DAY: ClassVar[MT5Manager.MTConServerTrade.EnOvernightMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    DemoMode: Any
    DemoPeriod: Any
    OvermonthMode: Any
    OvermonthTimeLast: Any
    OvermonthTimePrev: Any
    OvernightDays: Any
    OvernightMode: Any
    OvernightTime: Any
    OvernightTimeLast: Any
    OvernightTimePrev: Any
    TotalDeals: Any
    TotalOrders: Any
    TotalOrdersHistory: Any
    TotalPositions: Any
    TotalUsers: Any
    TotalUsersReal: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def DealsRangeAdd(self, range) -> Any: ...
    def DealsRangeClear(self) -> Any: ...
    def DealsRangeDelete(self, pos) -> Any: ...
    def DealsRangeNext(self, pos) -> Any: ...
    def DealsRangeShift(self, pos, shift) -> Any: ...
    def DealsRangeTotal(self) -> Any: ...
    def DealsRangeUpdate(self, pos, range) -> Any: ...
    def LoginsRangeAdd(self, range) -> Any: ...
    def LoginsRangeClear(self) -> Any: ...
    def LoginsRangeDelete(self, pos) -> Any: ...
    def LoginsRangeNext(self, pos) -> Any: ...
    def LoginsRangeShift(self, pos, shift) -> Any: ...
    def LoginsRangeTotal(self) -> Any: ...
    def LoginsRangeUpdate(self, pos, range) -> Any: ...
    def OrdersRangeAdd(self, range) -> Any: ...
    def OrdersRangeClear(self) -> Any: ...
    def OrdersRangeDelete(self, pos) -> Any: ...
    def OrdersRangeNext(self, pos) -> Any: ...
    def OrdersRangeShift(self, pos, shift) -> Any: ...
    def OrdersRangeTotal(self) -> Any: ...
    def OrdersRangeUpdate(self, pos, range) -> Any: ...

class MTConSpread:
    class EnSpreadMarginType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MARGIN_TYPE_CME_INTER: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        MARGIN_TYPE_CME_INTRA: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        MARGIN_TYPE_FIRST: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        MARGIN_TYPE_LAST: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        MARGIN_TYPE_MAXIMAL: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        MARGIN_TYPE_VALUE: ClassVar[MT5Manager.MTConSpread.EnSpreadMarginType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ID: Any
    MarginInitial: Any
    MarginMaintenance: Any
    MarginType: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ALegAdd(self, leg) -> Any: ...
    def ALegClear(self) -> Any: ...
    def ALegDelete(self, pos) -> Any: ...
    def ALegGet(self) -> Any: ...
    def ALegNext(self, pos) -> Any: ...
    def ALegSet(self, leg_list) -> Any: ...
    def ALegShift(self, pos, shift) -> Any: ...
    def ALegTotal(self) -> Any: ...
    def ALegUpdate(self, pos, leg) -> Any: ...
    def BLegAdd(self, leg) -> Any: ...
    def BLegClear(self) -> Any: ...
    def BLegDelete(self, pos) -> Any: ...
    def BLegGet(self) -> Any: ...
    def BLegNext(self, pos) -> Any: ...
    def BLegSet(self, leg_list) -> Any: ...
    def BLegShift(self, pos, shift) -> Any: ...
    def BLegTotal(self) -> Any: ...
    def BLegUpdate(self, pos, leg) -> Any: ...
    def Clear(self) -> bool: ...

class MTConSpreadLeg:
    class EnLegMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        LEG_MODE_FIRST: ClassVar[MT5Manager.MTConSpreadLeg.EnLegMode] = ...
        LEG_MODE_FUTURES: ClassVar[MT5Manager.MTConSpreadLeg.EnLegMode] = ...
        LEG_MODE_LAST: ClassVar[MT5Manager.MTConSpreadLeg.EnLegMode] = ...
        LEG_MODE_SYMBOL: ClassVar[MT5Manager.MTConSpreadLeg.EnLegMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Mode: Any
    Ratio: Any
    RatioDbl: Any
    Symbol: Any
    TimeFrom: Any
    TimeTo: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConSymbol:
    class EnCalcMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRADE_MODE_CFD: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_CFDINDEX: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_CFDLEVERAGE: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_BONDS: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_BONDS_MOEX: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_FIRST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_FUTURES: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_FUTURES_FORTS: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_LAST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_OPTIONS: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_OPTIONS_MARGIN: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_STOCKS: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_EXCH_STOCKS_MOEX: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_FOREX: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_FOREX_NO_LEVERAGE: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_FUTURES: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_LAST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_MM_FIRST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_MM_LAST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_SERV_COLLATERAL: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_SERV_FIRST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        TRADE_MODE_SERV_LAST: ClassVar[MT5Manager.MTConSymbol.EnCalcMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnChartMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        CHART_MODE_BID_PRICE: ClassVar[MT5Manager.MTConSymbol.EnChartMode] = ...
        CHART_MODE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnChartMode] = ...
        CHART_MODE_LAST: ClassVar[MT5Manager.MTConSymbol.EnChartMode] = ...
        CHART_MODE_LAST_PRICE: ClassVar[MT5Manager.MTConSymbol.EnChartMode] = ...
        CHART_MODE_OLD: ClassVar[MT5Manager.MTConSymbol.EnChartMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnExecutionMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        EXECUTION_EXCHANGE: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        EXECUTION_FIRST: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        EXECUTION_INSTANT: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        EXECUTION_LAST: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        EXECUTION_MARKET: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        EXECUTION_REQUEST: ClassVar[MT5Manager.MTConSymbol.EnExecutionMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnExpirationFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TIME_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_DAY: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_GTC: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_SPECIFIED: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        TIME_FLAGS_SPECIFIED_DAY: ClassVar[MT5Manager.MTConSymbol.EnExpirationFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnFillingFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        FILL_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnFillingFlags] = ...
        FILL_FLAGS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnFillingFlags] = ...
        FILL_FLAGS_FOK: ClassVar[MT5Manager.MTConSymbol.EnFillingFlags] = ...
        FILL_FLAGS_IOC: ClassVar[MT5Manager.MTConSymbol.EnFillingFlags] = ...
        FILL_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnFillingFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnGTCMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDERS_DAILY: ClassVar[MT5Manager.MTConSymbol.EnGTCMode] = ...
        ORDERS_DAILY_NO_STOPS: ClassVar[MT5Manager.MTConSymbol.EnGTCMode] = ...
        ORDERS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnGTCMode] = ...
        ORDERS_GTC: ClassVar[MT5Manager.MTConSymbol.EnGTCMode] = ...
        ORDERS_LAST: ClassVar[MT5Manager.MTConSymbol.EnGTCMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnIndustries(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        INDUSTRY_ADVERTISING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AEROSPACE_DEFENSE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AGRICULTURAL_INPUTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AIRLINES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AIRPORTS_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ALUMINIUM: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_APPAREL_MANUFACTURING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_APPAREL_RETAIL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ASSETS_MANAGEMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AUTO_DEALERSHIP: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AUTO_MANUFACTURERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_AUTO_PARTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BANKS_DIVERSIFIED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BANKS_REGIONAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BASIC_MATERIALS_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BASIC_MATERIALS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BASIC_MATERIALS_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BEVERAGES_BREWERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BEVERAGES_NON_ALCO: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BEVERAGES_WINERIES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BIOTECHNOLOGY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BROADCASTING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BUILDING_MATERIALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BUILDING_PRODUCTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_BUSINESS_EQUIPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CAPITAL_MARKETS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CHEMICALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CLOSE_END_FUND_DEBT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CLOSE_END_FUND_EQUITY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CLOSE_END_FUND_FOREIGN: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COKING_COAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_AGRICULTURAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_ENERGY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_METALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMODITIES_PRECIOUS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMUNICATION_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMUNICATION_EQUIPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMUNICATION_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMMUNICATION_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COMPUTER_HARDWARE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONFECTIONERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONGLOMERATES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSULTING_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_CYCL_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_CYCL_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_CYCL_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_DEF_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_DEF_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_DEF_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CONSUMER_ELECTRONICS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_COPPER: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_CREDIT_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_DEPARTMENT_STORES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_DIAGNOSTICS_RESEARCH: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_DISCOUNT_STORES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_DRUGS_MANUFACTURERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_DRUGS_MANUFACTURERS_SPEC: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_EDUCATION_TRAINIG: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ELECTRICAL_EQUIPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ELECTRONIC_COMPONENTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ELECTRONIC_DISTRIBUTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ENERGY_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ENERGY_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ENERGY_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ENGINEERING_CONSTRUCTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_ENTERTAINMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_EXCHANGE_TRADED_FUND: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FARM_HEAVY_MACHINERY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FARM_PRODUCTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FINANCIAL_CONGLOMERATE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FINANCIAL_DATA_EXCHANGE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FINANCIAL_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FINANCIAL_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FINANCIAL_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FOOD_DISTRIBUTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FOOTWEAR_ACCESSORIES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FREIGHT_LOGISTICS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_FURNISHINGS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_GAMBLING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_GAMING_MULTIMEDIA: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_GOLD: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_GROCERY_STORES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HEALTHCARE_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HEALTHCARE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HEALTHCARE_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HEALTHCARE_PLANS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HEALTH_INFORMATION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HOME_IMPROV_RETAIL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_HOUSEHOLD_PRODUCTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INDUSTRIALS_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INDUSTRIALS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INDUSTRIALS_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INDUSTRIAL_DISTRIBUTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INDUSTRIAL_METALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INFRASTRUCTURE_OPERATIONS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_BROKERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_DIVERSIFIED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_LIFE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_PROPERTY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_REINSURANCE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INSURANCE_SPECIALTY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INTERNET_CONTENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_INTERNET_RETAIL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_IT_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_LEISURE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_LODGING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_LUMBER_WOOD: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_LUXURY_GOODS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MARINE_SHIPPING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MEDICAL_DEVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MEDICAL_DISTRIBUTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MEDICAL_FACILITIES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MEDICAL_INSTRUMENTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_METAL_FABRICATION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_MORTGAGE_FINANCE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_DRILLING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_EP: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_EQUIPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_INTEGRATED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_MIDSTREAM: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_OIL_GAS_REFINING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PACKAGED_FOODS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PACKAGING_CONTAINERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PAPER: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PERSONAL_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PHARM_RETAILERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_POLLUTION_CONTROL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PRECIOUS_METALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_PUBLISHING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RAILROADS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_DEVELOPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_DIVERSIFIED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REAL_ESTATE_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RECREATIONAL_VEHICLES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_DIVERSIFIED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_HEALTCARE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_HOTEL_MOTEL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_INDUSTRIAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_MORTAGE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_OFFICE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_RESIDENTAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_RETAIL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_REIT_SPECIALITY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RENTAL_LEASING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RESIDENT_CONSTRUCTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RESORTS_CASINOS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_RESTAURANTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SCIENTIFIC_INSTRUMENTS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SECURITY_PROTECTION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SEMICONDUCTORS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SEMICONDUCTOR_EQUIPMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SHELL_COMPANIES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SILVER: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SOFTWARE_APPLICATION: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SOFTWARE_INFRASTRUCTURE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SOLAR: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SPEALITY_BUSINESS_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SPEALITY_MACHINERY: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SPECIALTY_CHEMICALS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_SPECIALTY_RETAIL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_STEEL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_STUFFING_EMPLOYMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TECHNOLOGY_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TECHNOLOGY_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TECHNOLOGY_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TELECOM: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TEXTILE_MANUFACTURING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_THERMAL_COAL: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TOBACCO: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TOOLS_ACCESSORIES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TRAVEL_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_TRUCKING: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UNDEFINED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_URANIUM: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_DIVERSIFIED: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_END: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_FIRST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_LAST: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_POWERPRODUCERS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_REGULATED_ELECTRIC: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_REGULATED_GAS: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_REGULATED_WATER: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_UTILITIES_RENEWABLE: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        INDUSTRY_WASTE_MANAGEMENT: ClassVar[MT5Manager.MTConSymbol.EnIndustries] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnInstantFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        INSTANT_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnInstantFlags] = ...
        INSTANT_FLAGS_FAST_CONFIRMATION: ClassVar[MT5Manager.MTConSymbol.EnInstantFlags] = ...
        INSTANT_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnInstantFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnInstantMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        INSTANT_CHECK_FIRST: ClassVar[MT5Manager.MTConSymbol.EnInstantMode] = ...
        INSTANT_CHECK_LAST: ClassVar[MT5Manager.MTConSymbol.EnInstantMode] = ...
        INSTANT_CHECK_NORMAL: ClassVar[MT5Manager.MTConSymbol.EnInstantMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMarginFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MARGIN_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        MARGIN_FLAGS_CHECK_PROCESS: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        MARGIN_FLAGS_CHECK_SLTP: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        MARGIN_FLAGS_EXCLUDE_PL: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        MARGIN_FLAGS_HEDGE_LARGE_LEG: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        MARGIN_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnMarginFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnMarginRateTypes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MARGIN_RATE_BUY: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_BUY_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_BUY_STOP: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_BUY_STOP_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_LAST: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_SELL: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_SELL_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_SELL_STOP: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        MARGIN_RATE_SELL_STOP_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnMarginRateTypes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOptionMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        OPTION_MODE_AMERICAN_CALL: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        OPTION_MODE_AMERICAN_PUT: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        OPTION_MODE_EUROPEAN_CALL: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        OPTION_MODE_EUROPEAN_PUT: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        OPTION_MODE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        OPTION_MODE_LAST: ClassVar[MT5Manager.MTConSymbol.EnOptionMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDER_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_CLOSEBY: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_FIRST: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_MARKET: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_SL: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_STOP: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_STOP_LIMIT: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        ORDER_FLAGS_TP: ClassVar[MT5Manager.MTConSymbol.EnOrderFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnRequestFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        REQUEST_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnRequestFlags] = ...
        REQUEST_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnRequestFlags] = ...
        REQUEST_FLAGS_ORDER: ClassVar[MT5Manager.MTConSymbol.EnRequestFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSectors(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SECTOR_BASIC_MATERIALS: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_COMMODITIES: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_COMMUNICATION_SERVICES: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_CONSUMER_CYCLICAL: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_CONSUMER_DEFENSIVE: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_CURRENCY: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_CURRENCY_CRYPTO: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_ENERGY: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_FINANCIAL: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_FIRST: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_HEALTHCARE: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_INDEXES: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_INDUSTRIALS: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_LAST: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_REAL_ESTATE: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_TECHNOLOGY: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_UNDEFINED: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        SECTOR_UTILITIES: ClassVar[MT5Manager.MTConSymbol.EnSectors] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSpliceTimeType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SPLICE_TIME_EXPIRATION: ClassVar[MT5Manager.MTConSymbol.EnSpliceTimeType] = ...
        SPLICE_TIME_FIRST: ClassVar[MT5Manager.MTConSymbol.EnSpliceTimeType] = ...
        SPLICE_TIME_LAST: ClassVar[MT5Manager.MTConSymbol.EnSpliceTimeType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSpliceType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SPLICE_ADJUSTED: ClassVar[MT5Manager.MTConSymbol.EnSpliceType] = ...
        SPLICE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnSpliceType] = ...
        SPLICE_LAST: ClassVar[MT5Manager.MTConSymbol.EnSpliceType] = ...
        SPLICE_NONE: ClassVar[MT5Manager.MTConSymbol.EnSpliceType] = ...
        SPLICE_UNADJUSTED: ClassVar[MT5Manager.MTConSymbol.EnSpliceType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSwapDays(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SWAP_DAY_DISABLED: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_FIRST: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_FRIDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_LAST: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_MONDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_SATURDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_SUNDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_THURSDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_TUESDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        SWAP_DAY_WEDNESDAY: ClassVar[MT5Manager.MTConSymbol.EnSwapDays] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSwapFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SWAP_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnSwapFlags] = ...
        SWAP_FLAGS_CONSIDER_HOLIDAYS: ClassVar[MT5Manager.MTConSymbol.EnSwapFlags] = ...
        SWAP_FLAGS_DEFAULT: ClassVar[MT5Manager.MTConSymbol.EnSwapFlags] = ...
        SWAP_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnSwapFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnSwapMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        SWAP_BY_GROUP_CURRENCY: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_INTEREST_CURRENT: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_INTEREST_OPEN: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_MARGIN_CURRENCY: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_POINTS: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_PROFIT_CURRENCY: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_BY_SYMBOL_CURRENCY: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_DISABLED: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_FIRST: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_LAST: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_REOPEN_BY_BID: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        SWAP_REOPEN_BY_CLOSE_PRICE: ClassVar[MT5Manager.MTConSymbol.EnSwapMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTickFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TICK_ALL: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        TICK_COLLECTRAW: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        TICK_FEED_STATS: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        TICK_NEGATIVE_PRICES: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        TICK_NONE: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        TICK_REALTIME: ClassVar[MT5Manager.MTConSymbol.EnTickFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRADE_FLAGS_ALL: ClassVar[MT5Manager.MTConSymbol.EnTradeFlags] = ...
        TRADE_FLAGS_ALLOW_SIGNALS: ClassVar[MT5Manager.MTConSymbol.EnTradeFlags] = ...
        TRADE_FLAGS_DEFAULT: ClassVar[MT5Manager.MTConSymbol.EnTradeFlags] = ...
        TRADE_FLAGS_NONE: ClassVar[MT5Manager.MTConSymbol.EnTradeFlags] = ...
        TRADE_FLAGS_PROFIT_BY_MARKET: ClassVar[MT5Manager.MTConSymbol.EnTradeFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TRADE_CLOSEONLY: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_DISABLED: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_FIRST: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_FULL: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_LAST: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_LONGONLY: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        TRADE_SHORTONLY: ClassVar[MT5Manager.MTConSymbol.EnTradeMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    AccruedInterest: Any
    Basis: Any
    CFI: Any
    CalcMode: Any
    Category: Any
    ChartMode: Any
    Color: Any
    ColorBackground: Any
    ContractSize: Any
    Country: Any
    CurrencyBase: Any
    CurrencyBaseDigits: Any
    CurrencyMargin: Any
    CurrencyMarginDigits: Any
    CurrencyProfit: Any
    CurrencyProfitDigits: Any
    Description: Any
    Digits: Any
    Exchange: Any
    ExecMode: Any
    ExpirFlags: Any
    FaceValue: Any
    FillFlags: Any
    FilterDiscard: Any
    FilterGap: Any
    FilterGapTicks: Any
    FilterHard: Any
    FilterHardTicks: Any
    FilterSoft: Any
    FilterSoftTicks: Any
    FilterSpreadMax: Any
    FilterSpreadMin: Any
    FreezeLevel: Any
    GTCMode: Any
    IECheckMode: Any
    IEFlags: Any
    IESlipLosing: Any
    IESlipProfit: Any
    IETimeout: Any
    IEVolumeMax: Any
    IEVolumeMaxExt: Any
    ISIN: Any
    Industry: Any
    International: Any
    MarginFlags: Any
    MarginHedged: Any
    MarginInitial: Any
    MarginLimit: Any
    MarginLong: Any
    MarginMaintenance: Any
    MarginRateCurrency: Any
    MarginRateLiquidity: Any
    MarginShort: Any
    MarginStop: Any
    MarginStopLimit: Any
    Multiply: Any
    OptionsMode: Any
    OrderFlags: Any
    Page: Any
    Path: Any
    Point: Any
    PriceLimitMax: Any
    PriceLimitMin: Any
    PriceSettle: Any
    PriceStrike: Any
    QuotesTimeout: Any
    REFlags: Any
    RETimeout: Any
    Sector: Any
    Source: Any
    SpliceTimeDays: Any
    SpliceTimeType: Any
    SpliceType: Any
    Spread: Any
    SpreadBalance: Any
    SpreadDiff: Any
    SpreadDiffBalance: Any
    StopsLevel: Any
    SubscriptionsDelay: Any
    SwapFlags: Any
    SwapLong: Any
    SwapMode: Any
    SwapRateFriday: Any
    SwapRateMonday: Any
    SwapRateSaturday: Any
    SwapRateSunday: Any
    SwapRateThursday: Any
    SwapRateTuesday: Any
    SwapRateWednesday: Any
    SwapShort: Any
    SwapYearDays: Any
    Symbol: Any
    TickBookDepth: Any
    TickFlags: Any
    TickSize: Any
    TickValue: Any
    TimeExpiration: Any
    TimeStart: Any
    TradeFlags: Any
    TradeMode: Any
    VolumeLimit: Any
    VolumeLimitExt: Any
    VolumeMax: Any
    VolumeMaxExt: Any
    VolumeMin: Any
    VolumeMinExt: Any
    VolumeStep: Any
    VolumeStepExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    @overload
    def MarginRateInitial(self, type) -> Any: ...
    @overload
    def MarginRateInitial(self, type, rate) -> Any: ...
    def MarginRateInitialGet(self) -> Any: ...
    def MarginRateInitialSet(self, rate_dict) -> Any: ...
    @overload
    def MarginRateMaintenance(self, type) -> Any: ...
    @overload
    def MarginRateMaintenance(self, type, rate) -> Any: ...
    def MarginRateMaintenanceGet(self) -> Any: ...
    def MarginRateMaintenanceSet(self, rate_dict) -> Any: ...
    def SessionQuoteAdd(self, wday, session) -> Any: ...
    def SessionQuoteClear(self, wday) -> Any: ...
    def SessionQuoteDelete(self, wday, pos) -> Any: ...
    def SessionQuoteGet(self) -> Any: ...
    def SessionQuoteNext(self, wday, pos) -> Any: ...
    def SessionQuoteSet(self, session_list) -> Any: ...
    def SessionQuoteShift(self, wday, pos, shift) -> Any: ...
    def SessionQuoteTotal(self, wday) -> Any: ...
    def SessionQuoteUpdate(self, wday, pos, session) -> Any: ...
    def SessionTradeAdd(self, wday, session) -> Any: ...
    def SessionTradeClear(self, wday) -> Any: ...
    def SessionTradeDelete(self, wday, pos) -> Any: ...
    def SessionTradeGet(self) -> Any: ...
    def SessionTradeNext(self, wday, pos) -> Any: ...
    def SessionTradeSet(self, session_list) -> Any: ...
    def SessionTradeShift(self, wday, pos, shift) -> Any: ...
    def SessionTradeTotal(self, wday) -> Any: ...
    def SessionTradeUpdate(self, wday, pos, session) -> Any: ...

class MTConSymbolSession:
    Close: Any
    CloseHours: Any
    CloseMinutes: Any
    Open: Any
    OpenHours: Any
    OpenMinutes: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConTime:
    class EnTimeTableMode(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TIME_MODE_DISABLED: ClassVar[MT5Manager.MTConTime.EnTimeTableMode] = ...
        TIME_MODE_ENABLED: ClassVar[MT5Manager.MTConTime.EnTimeTableMode] = ...
        TIME_MODE_FIRST: ClassVar[MT5Manager.MTConTime.EnTimeTableMode] = ...
        TIME_MODE_LAST: ClassVar[MT5Manager.MTConTime.EnTimeTableMode] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Daylight: Any
    DaylightState: Any
    TimeServer: Any
    TimeTable: Any
    TimeZone: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def TimeTableGet(self, wday, hour) -> Any: ...
    @overload
    def TimeTableGet(self) -> Any: ...
    @overload
    def TimeTableSet(self, wday, hour, mode) -> Any: ...
    @overload
    def TimeTableSet(self, timetable) -> Any: ...

class MTConVPS:
    class EnFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        VPS_NONE: ClassVar[MT5Manager.MTConVPS.EnFlags] = ...
        VPS_SPONSOR_ACTIVE: ClassVar[MT5Manager.MTConVPS.EnFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Flags: Any
    MQL5Login: Any
    MQL5Password: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GroupAdd(self, group) -> Any: ...
    def GroupClear(self) -> Any: ...
    def GroupDelete(self, pos) -> Any: ...
    def GroupGet(self) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupSet(self, group_list) -> Any: ...
    def GroupShift(self, pos, shift) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUpdate(self, pos, group) -> Any: ...

class MTConVPSGroup:
    Group: Any
    InactiveDays: Any
    MinBalance: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTConfirm:
    class EnConfirmFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        CONFIRM_FLAG_ALL: ClassVar[MT5Manager.MTConfirm.EnConfirmFlags] = ...
        CONFIRM_FLAG_NONE: ClassVar[MT5Manager.MTConfirm.EnConfirmFlags] = ...
        CONFIRM_FLAG_TICK: ClassVar[MT5Manager.MTConfirm.EnConfirmFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Comment: Any
    DealID: Any
    ExternalRetcode: Any
    Flags: Any
    ID: Any
    OrderID: Any
    PositionExternalID: Any
    Price: Any
    PriceGateway: Any
    Retcode: Any
    TickAsk: Any
    TickBid: Any
    TickLast: Any
    Volume: Any
    VolumeExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTDaily:
    AgentDaily: Any
    AgentMonthly: Any
    Balance: Any
    BalancePrevDay: Any
    BalancePrevMonth: Any
    CommissionDaily: Any
    CommissionMonthly: Any
    Company: Any
    Credit: Any
    Currency: Any
    CurrencyDigits: Any
    DailyAgent: Any
    DailyBalance: Any
    DailyBonus: Any
    DailyCharge: Any
    DailyCommFee: Any
    DailyCommInstant: Any
    DailyCommRound: Any
    DailyCorrection: Any
    DailyCredit: Any
    DailyDividend: Any
    DailyInterest: Any
    DailyProfit: Any
    DailySOCompensation: Any
    DailySOCompensationCredit: Any
    DailyStorage: Any
    DailyTaxes: Any
    Datetime: Any
    DatetimePrev: Any
    EMail: Any
    EquityPrevDay: Any
    EquityPrevMonth: Any
    Group: Any
    InterestRate: Any
    Login: Any
    Margin: Any
    MarginFree: Any
    MarginLevel: Any
    MarginLeverage: Any
    Name: Any
    ObsoleteValue: Any
    Profit: Any
    ProfitAssets: Any
    ProfitEquity: Any
    ProfitLiabilities: Any
    ProfitStorage: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def OrderAdd(self, order) -> Any: ...
    def OrderClear(self) -> Any: ...
    def OrderDelete(self, pos) -> Any: ...
    def OrderGet(self) -> Any: ...
    def OrderNext(self, pos) -> Any: ...
    def OrderSet(self, order_list) -> Any: ...
    def OrderShift(self, pos, shift) -> Any: ...
    def OrderTotal(self) -> Any: ...
    def OrderUpdate(self, pos, order) -> Any: ...
    def PositionAdd(self, position) -> Any: ...
    def PositionClear(self) -> Any: ...
    def PositionDelete(self, pos) -> Any: ...
    def PositionGet(self) -> Any: ...
    def PositionNext(self, pos) -> Any: ...
    def PositionSet(self, position_list) -> Any: ...
    def PositionShift(self, pos, shift) -> Any: ...
    def PositionTotal(self) -> Any: ...
    def PositionUpdate(self, pos, position) -> Any: ...

class MTDeal:
    class EnDealAction(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        DEAL_AGENT: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_AGENT_DAILY: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_AGENT_MONTHLY: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_BALANCE: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_BONUS: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_BUY: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_BUY_CANCELED: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_CHARGE: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_COMMISSION: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_COMMISSION_DAILY: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_COMMISSION_MONTHLY: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_CORRECTION: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_CREDIT: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_DIVIDEND: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_DIVIDEND_FRANKED: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_FIRST: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_INTERESTRATE: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_LAST: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_SELL: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_SELL_CANCELED: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_SO_COMPENSATION: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_SO_COMPENSATION_CREDIT: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        DEAL_TAX: ClassVar[MT5Manager.MTDeal.EnDealAction] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnDealEntry(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ENTRY_FIRST: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        ENTRY_IN: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        ENTRY_INOUT: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        ENTRY_LAST: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        ENTRY_OUT: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        ENTRY_OUT_BY: ClassVar[MT5Manager.MTDeal.EnDealEntry] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnDealReason(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        DEAL_REASON_CLIENT: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_CORPORATE_ACTION: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_DEALER: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_EXPERT: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_EXTERNAL_CLIENT: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_EXTERNAL_SERVICE: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_FIRST: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_GATEWAY: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_LAST: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_MIGRATION: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_MOBILE: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_ROLLOVER: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SETTLEMENT: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SIGNAL: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SL: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SO: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SPLIT: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_SYNC: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_TP: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_TRANSFER: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_VMARGIN: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        DEAL_REASON_WEB: ClassVar[MT5Manager.MTDeal.EnDealReason] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeModifyFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MODIFY_FLAGS_ADMIN: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_ALL: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_ADMIN: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_GATEWAY: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_MANAGER: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_SERVER: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_MANAGER: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_NONE: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_POSITION: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_RESTORE: ClassVar[MT5Manager.MTDeal.EnTradeModifyFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    Comment: Any
    Commission: Any
    ContractSize: Any
    Deal: Any
    Dealer: Any
    Digits: Any
    DigitsCurrency: Any
    Entry: Any
    ExpertID: Any
    ExternalID: Any
    Fee: Any
    Flags: Any
    Gateway: Any
    Login: Any
    MarketAsk: Any
    MarketBid: Any
    MarketLast: Any
    ModificationFlags: Any
    ObsoleteValue: Any
    Order: Any
    PositionID: Any
    Price: Any
    PriceGateway: Any
    PricePosition: Any
    PriceSL: Any
    PriceTP: Any
    Profit: Any
    ProfitRaw: Any
    RateMargin: Any
    RateProfit: Any
    Reason: Any
    Storage: Any
    Symbol: Any
    TickSize: Any
    TickValue: Any
    Time: Any
    TimeMsc: Any
    Value: Any
    Volume: Any
    VolumeClosed: Any
    VolumeClosedExt: Any
    VolumeExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Print(self) -> Any: ...

class MTGeo:
    class EnGeoRecordDetails(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        GEO_DETAILS_ALL: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_ATTACK_APP: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_ATTACK_MAIL: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_ATTACK_SSH: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_ATTACK_WEB: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_BLACKLIST: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_BOT_ANY: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_BOT_BOTNET: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_BOT_FAKE: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_BOT_SEARCH_ENGINE: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_DATACENTER: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_NONE: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_PROXY_HTTP: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_PROXY_TOR: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_PROXY_VPN: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        GEO_DETAILS_WEBDRIVER: ClassVar[MT5Manager.MTGeo.EnGeoRecordDetails] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnGeoRequestFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        GEO_REQUEST_FLAGS_ADDRESS: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_ALL: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_ASN: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_ASNNAME: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_CITY: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_CONTINENT: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_COORDINATES: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_COUNTRY: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_DETAILS: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_ISP: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_NONE: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_ORGANIZATION: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_PROVINCE: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        GEO_REQUEST_FLAGS_REGION: ClassVar[MT5Manager.MTGeo.EnGeoRequestFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ASN: Any
    ASNOrganization: Any
    City: Any
    Continent: Any
    Country: Any
    Details: Any
    IPv4From: Any
    IPv4To: Any
    IPv6From: Any
    IPv6To: Any
    ISP: Any
    ISPOrganization: Any
    Latitude: Any
    Longitude: Any
    Province: Any
    Region: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTLicenseCheck:
    name: Any
    random: Any
    retcode: Any
    sign: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTLogRecordPy(tuple):
    n_fields: ClassVar[int] = ...
    n_sequence_fields: ClassVar[int] = ...
    n_unnamed_fields: ClassVar[int] = ...
    __match_args__: ClassVar[tuple] = ...
    code: Any
    datetime: Any
    datetime_msc: Any
    flags: Any
    message: Any
    source: Any
    type: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _asdict(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class MTMail:
    Body: Any
    BodySize: Any
    From: Any
    FromName: Any
    ID: Any
    Parent: Any
    Subject: Any
    Time: Any
    To: Any
    ToName: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AttachmentsAdd(self, filename: str, attachment: bytes) -> bool: ...
    def AttachmentsBody(self, pos: int) -> bytes: ...
    def AttachmentsClear(self) -> bool: ...
    def AttachmentsName(self, pos: int) -> str: ...
    def AttachmentsSize(self, pos: int) -> int: ...
    def AttachmentsTotal(self) -> int: ...
    def Clear(self) -> bool: ...
    def ToRangesAdd(self, range: MTMailRange) -> bool: ...
    def ToRangesClear(self) -> bool: ...
    def ToRangesDelete(self, pos: int) -> bool: ...
    def ToRangesNext(self, pos: int) -> MTMailRange: ...
    def ToRangesTotal(self) -> int: ...

class MTMailRange:
    first_login: Any
    last_login: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTNews:
    class EnNewsFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        NEWS_FLAGS_ALL: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_CALENDAR: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_FIRST: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_NOBODY: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_NONE: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_PRIORITY: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        NEWS_FLAGS_READ: ClassVar[MT5Manager.MTNews.EnNewsFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Body: Any
    BodySize: Any
    Category: Any
    Flags: Any
    ID: Any
    Language: Any
    Subject: Any
    Time: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTOnline:
    Address: Any
    Build: Any
    ComputerID: Any
    Group: Any
    Login: Any
    SessionID: Any
    Time: Any
    Type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTOrder:
    class EnOrderActivation(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTIVATION_EXPIRATION: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_LAST: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_NONE: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_PENDING: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_STOPLIMIT: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        ACTIVATION_STOPOUT: ClassVar[MT5Manager.MTOrder.EnOrderActivation] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderFilling(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDER_FILL_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderFilling] = ...
        ORDER_FILL_FOK: ClassVar[MT5Manager.MTOrder.EnOrderFilling] = ...
        ORDER_FILL_IOC: ClassVar[MT5Manager.MTOrder.EnOrderFilling] = ...
        ORDER_FILL_LAST: ClassVar[MT5Manager.MTOrder.EnOrderFilling] = ...
        ORDER_FILL_RETURN: ClassVar[MT5Manager.MTOrder.EnOrderFilling] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderReason(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDER_REASON_CLIENT: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_CORPORATE_ACTION: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_DEALER: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_EXPERT: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_EXTERNAL_CLIENT: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_EXTERNAL_SERVICE: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_GATEWAY: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_LAST: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_MIGRATION: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_MOBILE: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_ROLLOVER: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SETTLEMENT: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SIGNAL: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SL: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SO: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SPLIT: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_SYNC: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_TP: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_TRANSFER: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_VMARGIN: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        ORDER_REASON_WEB: ClassVar[MT5Manager.MTOrder.EnOrderReason] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderState(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDER_STATE_CANCELED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_EXPIRED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_FILLED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_LAST: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_PARTIAL: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_PLACED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_REJECTED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_REQUEST_ADD: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_REQUEST_CANCEL: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_REQUEST_MODIFY: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        ORDER_STATE_STARTED: ClassVar[MT5Manager.MTOrder.EnOrderState] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderTime(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ORDER_TIME_DAY: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        ORDER_TIME_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        ORDER_TIME_GTC: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        ORDER_TIME_LAST: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        ORDER_TIME_SPECIFIED: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        ORDER_TIME_SPECIFIED_DAY: ClassVar[MT5Manager.MTOrder.EnOrderTime] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnOrderType(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        OP_BUY: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_BUY_LIMIT: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_BUY_STOP: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_BUY_STOP_LIMIT: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_CLOSE_BY: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_FIRST: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_LAST: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_SELL: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_SELL_LIMIT: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_SELL_STOP: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        OP_SELL_STOP_LIMIT: ClassVar[MT5Manager.MTOrder.EnOrderType] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeActivationFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTIV_FLAGS_ALL: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NONE: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_EXPIRATION: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_LIMIT: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SL: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SLIMIT: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SO: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_STOP: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_TP: ClassVar[MT5Manager.MTOrder.EnTradeActivationFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeModifyFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MODIFY_FLAGS_ADMIN: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_ALL: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_ADMIN: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_GATEWAY: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_MANAGER: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_SERVER: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_MANAGER: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_NONE: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_POSITION: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_RESTORE: ClassVar[MT5Manager.MTOrder.EnTradeModifyFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ActivationFlags: Any
    ActivationMode: Any
    ActivationPrice: Any
    ActivationTime: Any
    Comment: Any
    ContractSize: Any
    Dealer: Any
    Digits: Any
    DigitsCurrency: Any
    ExpertID: Any
    ExternalID: Any
    Login: Any
    ModificationFlags: Any
    Order: Any
    PositionByID: Any
    PositionID: Any
    PriceCurrent: Any
    PriceOrder: Any
    PriceSL: Any
    PriceTP: Any
    PriceTrigger: Any
    RateMargin: Any
    Reason: Any
    State: Any
    Symbol: Any
    TimeDone: Any
    TimeDoneMsc: Any
    TimeExpiration: Any
    TimeSetup: Any
    TimeSetupMsc: Any
    Type: Any
    TypeFill: Any
    TypeTime: Any
    VolumeCurrent: Any
    VolumeCurrentExt: Any
    VolumeInitial: Any
    VolumeInitialExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Print(self) -> str: ...

class MTPosition:
    class EnActivation(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTIVATION_FIRST: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        ACTIVATION_LAST: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        ACTIVATION_NONE: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        ACTIVATION_SL: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        ACTIVATION_STOPOUT: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        ACTIVATION_TP: ClassVar[MT5Manager.MTPosition.EnActivation] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPositionAction(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        POSITION_BUY: ClassVar[MT5Manager.MTPosition.EnPositionAction] = ...
        POSITION_FIRST: ClassVar[MT5Manager.MTPosition.EnPositionAction] = ...
        POSITION_LAST: ClassVar[MT5Manager.MTPosition.EnPositionAction] = ...
        POSITION_SELL: ClassVar[MT5Manager.MTPosition.EnPositionAction] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPositionReason(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        POSITION_REASON_CLIENT: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_CORPORATE_ACTION: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_DEALER: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_EXPERT: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_EXTERNAL_CLIENT: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_EXTERNAL_SERVICE: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_FIRST: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_GATEWAY: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_LAST: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_MIGRATION: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_MOBILE: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_ROLLOVER: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SETTLEMENT: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SIGNAL: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SL: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SO: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SPLIT: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_SYNC: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_TP: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_TRANSFER: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_VMARGIN: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        POSITION_REASON_WEB: ClassVar[MT5Manager.MTPosition.EnPositionReason] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeActivationFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        ACTIV_FLAGS_ALL: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NONE: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_EXPIRATION: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_LIMIT: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SL: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SLIMIT: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_SO: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_STOP: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        ACTIV_FLAGS_NO_TP: ClassVar[MT5Manager.MTPosition.EnTradeActivationFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeModifyFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        MODIFY_FLAGS_ADMIN: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_ALL: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_ADMIN: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_GATEWAY: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_MANAGER: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_API_SERVER: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_MANAGER: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_NONE: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_POSITION: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        MODIFY_FLAGS_RESTORE: ClassVar[MT5Manager.MTPosition.EnTradeModifyFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    ActivationFlags: Any
    ActivationMode: Any
    ActivationPrice: Any
    ActivationTime: Any
    Comment: Any
    ContractSize: Any
    Dealer: Any
    Digits: Any
    DigitsCurrency: Any
    ExpertID: Any
    ExpertPositionID: Any
    ExternalID: Any
    Login: Any
    ModificationFlags: Any
    ObsoleteValue: Any
    Position: Any
    PriceCurrent: Any
    PriceOpen: Any
    PriceSL: Any
    PriceTP: Any
    Profit: Any
    RateMargin: Any
    RateProfit: Any
    Reason: Any
    Storage: Any
    Symbol: Any
    TimeCreate: Any
    TimeCreateMsc: Any
    TimeUpdate: Any
    TimeUpdateMsc: Any
    Volume: Any
    VolumeExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Print(self) -> str: ...

class MTRequest:
    class EnTradeActionFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TA_FLAG_ALL: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_EXP_TIME: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_EXP_TYPE: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_PRICE: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_SL: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_TP: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CHANGED_TRIGGER: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_CLOSE: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_EXPERT: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_MARKET: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_NONE: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_SIGNAL: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        TA_FLAG_SKIP_MARGIN_CHECK: ClassVar[MT5Manager.MTRequest.EnTradeActionFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnTradeActions(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TA_ACTIVATE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_ACTIVATE_SL: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_ACTIVATE_STOPLIMIT: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_ACTIVATE_TP: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_CLIENT_FIRST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_CLIENT_LAST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_CLOSE_BY: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_BALANCE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_CLOSE_BY: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_FIRST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_LAST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_ORD_ACTIVATE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_ORD_MODIFY: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_ORD_PENDING: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_ORD_REMOVE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_ORD_SLIMIT: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_POS_EXECUTE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_DEALER_POS_MODIFY: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_END: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_EXCHANGE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_EXPIRATION: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_FIRST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_INSTANT: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_LAST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_MARKET: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_MODIFY: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_PENDING: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_PRICE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_REMOVE: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_REQUEST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_SERVER_FIRST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_SERVER_LAST: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_SLTP: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_STOPOUT_ORDER: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_STOPOUT_POSITION: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        TA_TRANSFER: ClassVar[MT5Manager.MTRequest.EnTradeActions] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Action: Any
    Comment: Any
    Digits: Any
    ExternalAccount: Any
    Flags: Any
    Group: Any
    ID: Any
    IDClient: Any
    IP: Any
    Login: Any
    Order: Any
    OrderExternalID: Any
    Position: Any
    PositionBy: Any
    PositionByExternalID: Any
    PositionExternalID: Any
    PriceDeviation: Any
    PriceDeviationBottom: Any
    PriceDeviationTop: Any
    PriceOrder: Any
    PriceSL: Any
    PriceTP: Any
    PriceTrigger: Any
    ResultComment: Any
    ResultDeal: Any
    ResultDealer: Any
    ResultDealerAsk: Any
    ResultDealerBid: Any
    ResultDealerLast: Any
    ResultMarketAsk: Any
    ResultMarketBid: Any
    ResultMarketLast: Any
    ResultOrder: Any
    ResultPrice: Any
    ResultRetcode: Any
    ResultVolume: Any
    ResultVolumeExt: Any
    SourceLogin: Any
    Symbol: Any
    SymbolOriginal: Any
    TimeExpiration: Any
    Type: Any
    TypeFill: Any
    TypeTime: Any
    Volume: Any
    VolumeCurrent: Any
    VolumeCurrentExt: Any
    VolumeExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def Print(self) -> Any: ...

class MTSummary:
    Digits: Any
    PositionClients: Any
    PositionCoverage: Any
    PriceBuyClients: Any
    PriceBuyCoverage: Any
    PriceSellClients: Any
    PriceSellCoverage: Any
    ProfitClients: Any
    ProfitCoverage: Any
    ProfitFullClients: Any
    ProfitFullCoverage: Any
    ProfitUncovered: Any
    ProfitUncoveredFull: Any
    Symbol: Any
    VolumeBuyClients: Any
    VolumeBuyClientsExt: Any
    VolumeBuyCoverage: Any
    VolumeBuyCoverageExt: Any
    VolumeNet: Any
    VolumeSellClients: Any
    VolumeSellClientsExt: Any
    VolumeSellCoverage: Any
    VolumeSellCoverageExt: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...

class MTTick:
    class EnTickFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TICK_FLAG_ALL: ClassVar[MT5Manager.MTTick.EnTickFlags] = ...
        TICK_FLAG_BUY: ClassVar[MT5Manager.MTTick.EnTickFlags] = ...
        TICK_FLAG_NONE: ClassVar[MT5Manager.MTTick.EnTickFlags] = ...
        TICK_FLAG_SELL: ClassVar[MT5Manager.MTTick.EnTickFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ask: Any
    bank: Any
    bid: Any
    datetime: Any
    datetime_msc: Any
    flags: Any
    last: Any
    symbol: Any
    volume: Any
    volume_ext: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTTickShort:
    class EnTickShortFlags(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        TICK_SHORT_FLAG_ASK: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_BID: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_BUY: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_LAST: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_NONE: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_RAW: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_SELL: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        TICK_SHORT_FLAG_VOLUME: ClassVar[MT5Manager.MTTickShort.EnTickShortFlags] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    ask: Any
    bid: Any
    datetime: Any
    datetime_msc: Any
    flags: Any
    last: Any
    volume: Any
    volume_ext: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTTickStat:
    ask_high: Any
    ask_low: Any
    bid_high: Any
    bid_low: Any
    datetime: Any
    datetime_msc: Any
    last_high: Any
    last_low: Any
    price_aw: Any
    price_close: Any
    price_greeks_delta: Any
    price_greeks_gamma: Any
    price_greeks_omega: Any
    price_greeks_rho: Any
    price_greeks_theta: Any
    price_greeks_vega: Any
    price_obsolete: Any
    price_open: Any
    price_sensitivity: Any
    price_theoretical: Any
    price_volatility: Any
    symbol: Any
    trade_buy_orders: Any
    trade_buy_volume: Any
    trade_buy_volume_ext: Any
    trade_deals: Any
    trade_interest: Any
    trade_sell_orders: Any
    trade_sell_volume: Any
    trade_sell_volume_ext: Any
    trade_turnover: Any
    trade_volume: Any
    trade_volume_ext: Any
    vol_high: Any
    vol_high_ext: Any
    vol_low: Any
    vol_low_ext: Any
    def __init__(self, *args, **kwargs) -> None: ...

class MTUser:
    class EnUsersConnectionTypes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        USER_TYPE_ADMIN: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_ADMIN_API: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_ANDROID: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_API_WEB: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_BLACKBERRY: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_IPHONE: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_WEB: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_WINMOBILE: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_CLIENT_WINPHONE: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_FIRST: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_LAST: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_MANAGER: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_MANAGER_API: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        USER_TYPE_MANAGER_API_WEB: ClassVar[MT5Manager.MTUser.EnUsersConnectionTypes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnUsersPasswords(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        USER_PASS_API: ClassVar[MT5Manager.MTUser.EnUsersPasswords] = ...
        USER_PASS_FIRST: ClassVar[MT5Manager.MTUser.EnUsersPasswords] = ...
        USER_PASS_INVESTOR: ClassVar[MT5Manager.MTUser.EnUsersPasswords] = ...
        USER_PASS_LAST: ClassVar[MT5Manager.MTUser.EnUsersPasswords] = ...
        USER_PASS_MAIN: ClassVar[MT5Manager.MTUser.EnUsersPasswords] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnUsersRights(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        USER_RIGHT_ALL: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_API_ENABLED: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_CONFIRMED: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_DEFAULT: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_ENABLED: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_EXCLUDE_REPORTS: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_EXPERT: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_INVESTOR: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_NONE: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_OBSOLETE: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_OTP_ENABLED: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_PASSWORD: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_PUSH_NOTIFICATION: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_READONLY: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_REPORTS: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_RESET_PASS: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_SPONSORED_HOSTING: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_TECHNICAL: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_TRADE_DISABLED: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        USER_RIGHT_TRAILING: ClassVar[MT5Manager.MTUser.EnUsersRights] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    Account: Any
    Address: Any
    Agent: Any
    Balance: Any
    BalancePrevDay: Any
    BalancePrevMonth: Any
    CertSerialNumber: Any
    City: Any
    ClientID: Any
    Color: Any
    Comment: Any
    CommissionAgentDaily: Any
    CommissionAgentMonthly: Any
    CommissionDaily: Any
    CommissionMonthly: Any
    Company: Any
    Country: Any
    Credit: Any
    EMail: Any
    EquityPrevDay: Any
    EquityPrevMonth: Any
    FirstName: Any
    Group: Any
    ID: Any
    InterestRate: Any
    Language: Any
    LastAccess: Any
    LastIP: Any
    LastName: Any
    LastPassChange: Any
    LeadCampaign: Any
    LeadSource: Any
    Leverage: Any
    LimitOrders: Any
    LimitPositionsValue: Any
    Login: Any
    MQID: Any
    MiddleName: Any
    Name: Any
    OTPSecret: Any
    Phone: Any
    PhonePassword: Any
    Registration: Any
    Rights: Any
    State: Any
    Status: Any
    ZIPCode: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Clear(self) -> bool: ...
    def ExternalAccountAdd(self, gateway_id: int, account: str) -> bool: ...
    def ExternalAccountClear(self) -> bool: ...
    def ExternalAccountDelete(self, pos: int) -> bool: ...
    def ExternalAccountGet(self, gateway_id: int) -> str: ...
    def ExternalAccountNext(self, pos: int) -> tuple[int,str]: ...
    def ExternalAccountTotal(self) -> int: ...
    def ExternalAccountUpdate(self, pos: int, gateway_id: int, account: str) -> bool: ...

class ManagerAPI:
    class EnExternalSyncModes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        EXTERNAL_SYNC_ALL: ClassVar[MT5Manager.ManagerAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_BALANCE: ClassVar[MT5Manager.ManagerAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_LAST: ClassVar[MT5Manager.ManagerAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_ORDERS: ClassVar[MT5Manager.ManagerAPI.EnExternalSyncModes] = ...
        EXTERNAL_SYNC_POSITIONS: ClassVar[MT5Manager.ManagerAPI.EnExternalSyncModes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...

    class EnPumpModes(enum.IntFlag):
        class _member_type_:
            denominator: Any
            imag: Any
            numerator: Any
            real: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            def bit_count(self) -> Any: ...
            def bit_length(self) -> Any: ...
            def conjugate(self, *args, **kwargs) -> Any: ...
            @classmethod
            def from_bytes(cls, *args, **kwargs) -> Any: ...
            def to_bytes(self, *args, **kwargs) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            def __ceil__(self, *args, **kwargs) -> int: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floor__(self, *args, **kwargs) -> int: ...
            def __floordiv__(self, other) -> Any: ...
            def __format__(self, *args, **kwargs) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __getnewargs__(self, *args, **kwargs) -> Any: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __round__(self) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sizeof__(self) -> int: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __trunc__(self) -> int: ...
            def __xor__(self, other) -> Any: ...
        __new__: ClassVar[function] = ...
        PUMP_MODE_ACTIVITY: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_CLIENTS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_FULL: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_GATEWAYS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_GROUPS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_HOLIDAYS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_MAIL: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_NEWS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_ORDERS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_PLUGINS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_POSITIONS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_REQUESTS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_SUBSCRIPTIONS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_SYMBOLS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_TIME: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        PUMP_MODE_USERS: ClassVar[MT5Manager.ManagerAPI.EnPumpModes] = ...
        _generate_next_value_: ClassVar[function] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _value2member_map_: ClassVar[dict] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def BookGet(self, symbol) -> Any: ...
    def BookSubscribe(self, symbol, tick_sink) -> Any: ...
    def BookSubscribeBatch(self, symbol_list, tick_sink) -> Any: ...
    def BookUnsubscribe(self, symbol, tick_sink) -> Any: ...
    def BookUnsubscribeBatch(self, symbol_list, tick_sink) -> Any: ...
    def ChartDelete(self, symbol, bar_list) -> Any: ...
    def ChartReplace(self, symbol, from_date, to_date, bar_list) -> Any: ...
    def ChartRequest(self, symbol, from_date, to_date) -> Any: ...
    def ChartSplit(self, symbol, new_shares, old_shares, rounding_rule, from_date, to_date) -> Any: ...
    def ChartUpdate(self, symbol, bar_list) -> Any: ...
    def Connect(self, server, login, password, pump_mode, timeout) -> Any: ...
    def DailyRequest(self, login, from_date, to_date) -> Any: ...
    def DailyRequestByGroup(self, login, from_date, to_date) -> Any: ...
    def DailyRequestByLogins(self, login, from_date, to_date) -> Any: ...
    def DailyRequestLight(self, login, from_date, to_date) -> Any: ...
    def DailyRequestLightByGroup(self, login, from_date, to_date) -> Any: ...
    def DailyRequestLightByLogins(self, login, from_date, to_date) -> Any: ...
    def DealAdd(self, deal) -> Any: ...
    def DealAddBatch(self, deals_list) -> Any: ...
    def DealDelete(self, deal) -> Any: ...
    def DealDeleteBatch(self, deals_list) -> Any: ...
    def DealPerform(self, deal) -> Any: ...
    def DealPerformBatch(self, deals_list) -> Any: ...
    @overload
    def DealRequest(self, ticket) -> Any: ...
    @overload
    def DealRequest(self, login, from_date, to_date) -> Any: ...
    def DealRequestByGroup(self, group, from_date, to_date) -> Any: ...
    def DealRequestByGroupCSV(self, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupNumPy(self, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupSymbol(self, group, symbol, from_date, to_date) -> Any: ...
    def DealRequestByGroupSymbolCSV(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def DealRequestByGroupSymbolNumPy(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def DealRequestByLogins(self, login_list, from_date, to_date) -> Any: ...
    def DealRequestByLoginsCSV(self, login_list, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsNumPy(self, login_list, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsSymbol(self, login_list, group, from_date, to_date) -> Any: ...
    def DealRequestByLoginsSymbolCSV(self, login_list, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByLoginsSymbolNumPy(self, login_list, group, from_date, to_date, fields) -> Any: ...
    def DealRequestByTickets(self, ticket_list) -> Any: ...
    def DealRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def DealRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def DealRequestCSV(self, login, from_date, to_date, fields) -> Any: ...
    def DealRequestNumPy(self, login, from_date, to_date, fields) -> Any: ...
    def DealRequestPage(self, login, from_date, to_date, offset, total) -> Any: ...
    def DealRequestPageCSV(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def DealRequestPageNumPy(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def DealSubscribe(self, deal_sink) -> Any: ...
    def DealUnsubscribe(self, deal_sink) -> Any: ...
    def DealUpdate(self, deal) -> Any: ...
    def DealUpdateBatch(self, deals_list) -> Any: ...
    def DealerAnswer(self, answer) -> Any: ...
    def DealerBalance(self, login, value, type, comment) -> Any: ...
    def DealerBalanceRaw(self, login, value, type, comment) -> Any: ...
    def DealerGet(self) -> Any: ...
    def DealerLock(self, request_id) -> Any: ...
    def DealerSend(self, request, sink) -> Any: ...
    def DealerStart(self) -> Any: ...
    def DealerStop(self) -> Any: ...
    def DealerUnsubscribe(self, sink) -> Any: ...
    def Disconnect(self) -> Any: ...
    def EmailSend(self, account, to, to_name, subject, body) -> Any: ...
    def GeoResolve(self, address: str, flags: int) -> MTGeo: ...
    def GeoResolveBatch(self, addresses: list[str], flags: int) -> tuple[list[MTGeo],list[int]]: ...
    def GroupGet(self, name) -> Any: ...
    def GroupNext(self, pos) -> Any: ...
    def GroupRequest(self, name) -> Any: ...
    def GroupRequestArray(self, mask) -> Any: ...
    def GroupSubscribe(self, sink) -> Any: ...
    def GroupTotal(self) -> Any: ...
    def GroupUnsubscribe(self, sink) -> Any: ...
    def GroupUpdate(self, group) -> Any: ...
    def GroupUpdateBatch(self, group_list) -> Any: ...
    def HistoryRequest(self, login, from_date, to_date) -> Any: ...
    def HistoryRequestByGroup(self, group, from_date, to_date) -> Any: ...
    def HistoryRequestByGroupCSV(self, group, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupNumPy(self, group, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupSymbol(self, group, symbol, from_date, to_date) -> Any: ...
    def HistoryRequestByGroupSymbolCSV(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByGroupSymbolNumPy(self, group, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLogins(self, login_list, from_date, to_date) -> Any: ...
    def HistoryRequestByLoginsCSV(self, login_list, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsNumPy(self, login_list, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsSymbol(self, login_list, symbol, from_date, to_date) -> Any: ...
    def HistoryRequestByLoginsSymbolCSV(self, login_list, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByLoginsSymbolNumPy(self, login_list, symbol, from_date, to_date, fields) -> Any: ...
    def HistoryRequestByTickets(self, ticket_list) -> Any: ...
    def HistoryRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def HistoryRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def HistoryRequestCSV(self, login, from_date, to_date, fields) -> Any: ...
    def HistoryRequestNumPy(self, login, from_date, to_date, fields) -> Any: ...
    def HistoryRequestPage(self, login, from_date, to_date, offset, total) -> Any: ...
    def HistoryRequestPageCSV(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def HistoryRequestPageNumPy(self, login, from_date, to_date, offset, total, fields) -> Any: ...
    def HolidayGetArray(self) -> Any: ...
    def HolidayNext(self, pos) -> Any: ...
    def HolidaySubscribe(self, sink) -> Any: ...
    def HolidayTotal(self) -> Any: ...
    def HolidayUnsubscribe(self, sink) -> Any: ...
    def LeverageGet(self, name: str) -> MTConLeverage: ...
    def LeverageNext(self, pos: int) -> MTConLeverage: ...
    def LeverageRequest(self, name) -> MTConLeverage: ...
    def LeverageRequestArray(self, mask) -> list[MTConLeverage]: ...
    def LeverageSubscribe(self, callback) -> bool: ...
    def LeverageTotal(self) -> int: ...
    def LeverageUnsubscribe(self, callback) -> bool: ...
    def LicenseCheck(self, check: MTLicenseCheck) -> Any: ...
    def LoggerFlush(self) -> Any: ...
    def LoggerOut(self, code, msg) -> Any: ...
    def LoggerServerRequest(self, mode, type, from_date, to_date, filter) -> Any: ...
    def MailSend(self, mail: MTMail) -> bool: ...
    def ManagerCurrent(self) -> Any: ...
    def MessengerSend(self, destination, group, sender, text) -> Any: ...
    def MessengerVerifyPhone(self, phone_number) -> Any: ...
    def NetworkAddress(self) -> str: ...
    def NetworkBytesRead(self) -> int: ...
    def NetworkBytesSent(self) -> int: ...
    def NetworkRescan(self, flags: int, timeout: int) -> bool: ...
    def NetworkServer(self) -> str: ...
    def NewsBodyRequest(self, id) -> MTNews: ...
    def NewsGet(self) -> Any: ...
    def NewsNext(self, pos) -> Any: ...
    def NewsSend(self, news) -> Any: ...
    def NewsSubscribe(self, news_sink) -> Any: ...
    def NewsTotal(self) -> Any: ...
    def NewsUnsubscribe(self, news_sink) -> Any: ...
    @overload
    def NotificationsSend(self, metaquotes_id, message) -> Any: ...
    @overload
    def NotificationsSend(self, login_list, message) -> Any: ...
    def OnlineDisconnect(self, online) -> Any: ...
    def OnlineDisconnectBatch(self, online_list) -> Any: ...
    def OnlineGet(self, login) -> Any: ...
    def OnlineGetArray(self) -> Any: ...
    def OnlineNext(self, pos) -> Any: ...
    def OnlineTotal(self) -> Any: ...
    def OrderAdd(self, order) -> Any: ...
    def OrderAddBatch(self, orders_list) -> Any: ...
    def OrderCancel(self, ticket) -> Any: ...
    def OrderCancelBatch(self, ticket_list) -> Any: ...
    def OrderDelete(self, ticket) -> Any: ...
    def OrderDeleteBatch(self, ticket_list) -> Any: ...
    def OrderGet(self, ticket: int) -> MTOrder: ...
    def OrderGetByGroup(self, group) -> Any: ...
    def OrderGetByGroupCSV(self, group, fields) -> Any: ...
    def OrderGetByGroupNumPy(self, group, fields) -> Any: ...
    def OrderGetByLogins(self, login_list) -> Any: ...
    def OrderGetByLoginsCSV(self, login_list, fields) -> Any: ...
    def OrderGetByLoginsNumPy(self, login_list, fields) -> Any: ...
    def OrderGetByTickets(self, ticket_list) -> Any: ...
    def OrderGetByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def OrderGetByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def OrderGetOpen(self, login) -> Any: ...
    def OrderGetOpenCSV(self, login, fields) -> Any: ...
    def OrderGetOpenNumPy(self, login, fields) -> Any: ...
    def OrderRequest(self, ticket: int) -> MTOrder: ...
    def OrderRequestByGroup(self, group) -> Any: ...
    def OrderRequestByGroupCSV(self, group, fields) -> Any: ...
    def OrderRequestByGroupNumPy(self, group, fields) -> Any: ...
    def OrderRequestByGroupSymbol(self, group, symbol) -> Any: ...
    def OrderRequestByGroupSymbolCSV(self, group, symbol, fields) -> Any: ...
    def OrderRequestByGroupSymbolNumPy(self, group, symbol, fields) -> Any: ...
    def OrderRequestByLogins(self, login_list) -> Any: ...
    def OrderRequestByLoginsCSV(self, login_list, fields) -> Any: ...
    def OrderRequestByLoginsNumPy(self, login_list, fields) -> Any: ...
    def OrderRequestByLoginsSymbol(self, login_list, symbol) -> Any: ...
    def OrderRequestByLoginsSymbolCSV(self, login_list, symbol, fields) -> Any: ...
    def OrderRequestByLoginsSymbolNumPy(self, login_list, symbol, fields) -> Any: ...
    def OrderRequestByTickets(self, ticket_list) -> Any: ...
    def OrderRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def OrderRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def OrderRequestOpen(self, login) -> Any: ...
    def OrderRequestOpenCSV(self, login, fields) -> Any: ...
    def OrderRequestOpenNumPy(self, login, fields) -> Any: ...
    def OrderSubscribe(self, sink) -> Any: ...
    def OrderUnsubscribe(self, sink) -> Any: ...
    def OrderUpdate(self, order) -> Any: ...
    def OrderUpdateBatch(self, orders_list) -> Any: ...
    def PasswordChange(self, type: int, password: str) -> Any: ...
    def PluginGet(self, name) -> Any: ...
    def PluginNext(self, pos) -> Any: ...
    def PluginTotal(self) -> Any: ...
    def PluginUpdate(self, plugin) -> Any: ...
    def PositionDelete(self, position) -> Any: ...
    def PositionDeleteBatch(self, positions_list) -> Any: ...
    def PositionDeleteByTicket(self, ticket) -> Any: ...
    @overload
    def PositionGet(self, login: int, symbol: str) -> MTPosition: ...
    @overload
    def PositionGet(self, login: int) -> list[MTPosition]: ...
    def PositionGetByGroup(self, group) -> Any: ...
    def PositionGetByGroupCSV(self, group, fields) -> Any: ...
    def PositionGetByGroupNumPy(self, group, fields) -> Any: ...
    def PositionGetByLogins(self, login_list) -> Any: ...
    def PositionGetByLoginsCSV(self, login_list, fields) -> Any: ...
    def PositionGetByLoginsNumPy(self, login_list, fields) -> Any: ...
    def PositionGetBySymbol(self, group, symbol) -> Any: ...
    def PositionGetBySymbolCSV(self, group, symbol, fields) -> Any: ...
    def PositionGetBySymbolNumPy(self, group, symbol, fields) -> Any: ...
    def PositionGetByTicket(self, ticket: int) -> MTPosition: ...
    def PositionGetByTickets(self, ticket_list) -> Any: ...
    def PositionGetByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def PositionGetByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def PositionGetCSV(self, login, fields) -> Any: ...
    def PositionGetNumPy(self, login, fields) -> Any: ...
    def PositionRequest(self, login: int) -> list[MTPosition]: ...
    def PositionRequestByGroup(self, group) -> Any: ...
    def PositionRequestByGroupCSV(self, group, fields) -> Any: ...
    def PositionRequestByGroupNumPy(self, group, fields) -> Any: ...
    def PositionRequestByGroupSymbol(self, group, symbol) -> Any: ...
    def PositionRequestByGroupSymbolCSV(self, group, symbol, fields) -> Any: ...
    def PositionRequestByGroupSymbolNumPy(self, group, symbol, fields) -> Any: ...
    def PositionRequestByLogins(self, login_list) -> Any: ...
    def PositionRequestByLoginsCSV(self, login_list, fields) -> Any: ...
    def PositionRequestByLoginsNumPy(self, login_list, fields) -> Any: ...
    def PositionRequestByLoginsSymbol(self, login_list, symbol) -> Any: ...
    def PositionRequestByLoginsSymbolCSV(self, login_list, symbol, fields) -> Any: ...
    def PositionRequestByLoginsSymbolNumPy(self, login_list, symbol, fields) -> Any: ...
    def PositionRequestByTickets(self, ticket_list) -> Any: ...
    def PositionRequestByTicketsCSV(self, ticket_list, fields) -> Any: ...
    def PositionRequestByTicketsNumPy(self, ticket_list, fields) -> Any: ...
    def PositionRequestCSV(self, login, fields) -> Any: ...
    def PositionRequestNumPy(self, login, fields) -> Any: ...
    def PositionSplit(self, tickets, adjustments, new_shares, old_shares, round_rule_price, round_rule_volume, flags) -> Any: ...
    def PositionSubscribe(self, sink) -> Any: ...
    def PositionUnsubscribe(self, sink) -> Any: ...
    def PositionUpdate(self, position) -> Any: ...
    def PositionUpdateBatch(self, positions_list) -> Any: ...
    def RequestGet(self, id) -> Any: ...
    def RequestGetAll(self) -> Any: ...
    def RequestNext(self, pos) -> Any: ...
    def RequestSubscribe(self, sink) -> Any: ...
    def RequestTotal(self) -> Any: ...
    def RequestUnsubscribe(self, sink) -> Any: ...
    def SelectedAdd(self, symbol) -> Any: ...
    def SelectedAddAll(self) -> Any: ...
    def SelectedAddBatch(self, symbols) -> Any: ...
    @overload
    def SelectedDelete(self, pos: int) -> Any: ...
    @overload
    def SelectedDelete(self, symbol: str) -> Any: ...
    def SelectedDeleteAll(self) -> Any: ...
    def SelectedDeleteBatch(self, symbols) -> Any: ...
    def SelectedGet(self) -> Any: ...
    def SelectedNext(self, pos) -> Any: ...
    def SelectedSet(self, symbols) -> Any: ...
    def SelectedShift(self, pos, shift) -> Any: ...
    def SelectedTotal(self) -> Any: ...
    def SettingDelete(self, section, key) -> Any: ...
    def SettingGet(self, section, key) -> Any: ...
    def SettingSet(self, section, key, indata) -> Any: ...
    def SpreadGetArray(self) -> list[MTConSpread]: ...
    def SpreadNext(self, pos) -> Any: ...
    def SpreadSubscribe(self, spread_sink) -> Any: ...
    def SpreadTotal(self) -> Any: ...
    def SpreadUnsubscribe(self, spread_sink) -> Any: ...
    def Subscribe(self, sink) -> Any: ...
    @overload
    def SummaryCurrency(self) -> str: ...
    @overload
    def SummaryCurrency(self, currency: str) -> Any: ...
    def SummaryGet(self, symbol: str) -> MTSummary: ...
    def SummaryGetAll(self) -> list[MTSummary]: ...
    def SummaryNext(self, pos: int) -> MTSummary: ...
    def SummarySubscribe(self, summary_sink) -> Any: ...
    def SummaryTotal(self) -> int: ...
    def SummaryUnsubscribe(self, summary_sink) -> Any: ...
    def SymbolExist(self, symbol, group) -> bool: ...
    @overload
    def SymbolGet(self, name: str) -> MTConSymbol: ...
    @overload
    def SymbolGet(self, name: str, group: str) -> MTConSymbol: ...
    def SymbolGetArray(self) -> list[MTConSymbol]: ...
    def SymbolNext(self, pos: int) -> MTConSymbol: ...
    @overload
    def SymbolRequest(self, name) -> MTConSymbol: ...
    @overload
    def SymbolRequest(self, name, group) -> MTConSymbol: ...
    def SymbolRequestArray(self, mask, group) -> list[MTConSymbol]: ...
    def SymbolSubscribe(self, sink) -> Any: ...
    def SymbolTotal(self) -> int: ...
    def SymbolUnsubscribe(self, sink) -> Any: ...
    def SymbolUpdate(self, symbol) -> Any: ...
    def SymbolUpdateBatch(self, symbol) -> Any: ...
    def TickAdd(self, tick) -> Any: ...
    def TickAddBatch(self, tick_list) -> Any: ...
    def TickAddStat(self, tick, tick_stat) -> Any: ...
    def TickHistoryAdd(self, symbol, tick_list) -> Any: ...
    def TickHistoryReplace(self, symbol, from_date, to_date, tick_list) -> Any: ...
    def TickHistoryRequest(self, symbol, from_date, to_date) -> Any: ...
    def TickHistoryRequestRaw(self, symbol, from_date, to_date) -> Any: ...
    @overload
    def TickLast(self, symbol) -> Any: ...
    @overload
    def TickLast(self, symbol, group) -> Any: ...
    def TickLastRaw(self, symbol: str) -> Any: ...
    def TickStat(self, symbol) -> Any: ...
    def TickSubscribe(self, tick_sink) -> Any: ...
    def TickUnsubscribe(self, tick_sink) -> Any: ...
    def TimeGet(self) -> Any: ...
    def TimeServer(self) -> Any: ...
    def TimeServerRequest(self) -> Any: ...
    def TimeSubscribe(self, sink) -> Any: ...
    def TimeUnsubscribe(self, sink) -> Any: ...
    def TradeAccountSet(self, request_id, user, account, orders, positions) -> Any: ...
    @overload
    def TradeMarginCheck(self, login, symbol, type, volume, price) -> Any: ...
    @overload
    def TradeMarginCheck(self, order) -> Any: ...
    def TradeMarginCheckExt(self, login, symbol, type, volume, price) -> Any: ...
    def TradeProfit(self, group, symbol, type, volume, price_open, price_close) -> Any: ...
    def TradeProfitExt(self, group, symbol, type, volume, price_open, price_close) -> Any: ...
    def TradeRateBuy(self, base, currency, group, symbol, price) -> Any: ...
    def TradeRateSell(self, base, currency, group, symbol, price) -> Any: ...
    def Unsubscribe(self, sink) -> Any: ...
    def UserAccountGet(self, login) -> Any: ...
    def UserAccountGetByGroup(self, group) -> Any: ...
    def UserAccountGetByLogins(self, logins_list) -> Any: ...
    def UserAccountRequest(self, login) -> Any: ...
    def UserAccountRequestArray(self, group) -> Any: ...
    def UserAccountRequestByLogins(self, logins_list) -> Any: ...
    def UserAccountSubscribe(self, user_sink) -> Any: ...
    def UserAccountUnsubscribe(self, user_sink) -> Any: ...
    def UserAdd(self, user, master, investor) -> Any: ...
    def UserBalanceCheck(self, login, fix_flag) -> Any: ...
    def UserBalanceCheckBatch(self, logins_list, fix_flag) -> Any: ...
    def UserCertConfirm(self, login) -> Any: ...
    def UserCertDelete(self, login) -> Any: ...
    def UserCertGet(self, login) -> Any: ...
    def UserCertUpdate(self, login, certificate) -> Any: ...
    def UserDelete(self, login) -> Any: ...
    def UserDeleteBatch(self, login_list) -> Any: ...
    @overload
    def UserExternalGet(self, gateway_id, account) -> MTUser: ...
    @overload
    def UserExternalGet(self, account) -> MTUser: ...
    @overload
    def UserExternalRequest(self, gateway_id, account) -> Any: ...
    @overload
    def UserExternalRequest(self, account) -> Any: ...
    def UserExternalSync(self, login, gateway_id, account, sync_mode) -> Any: ...
    def UserGet(self, login: int) -> MTUser: ...
    @overload
    def UserGetByGroup(self) -> list[MTUser]: ...
    @overload
    def UserGetByGroup(self, group: str) -> list[MTUser]: ...
    def UserGetByGroupCSV(self, group, fields) -> Any: ...
    def UserGetByGroupNumPy(self, group, fields) -> Any: ...
    def UserGetByLogins(self, login_list) -> list[MTUser]: ...
    def UserGetByLoginsCSV(self, login_list, fields) -> Any: ...
    def UserGetByLoginsNumPy(self, login_list, fields) -> Any: ...
    def UserGroup(self, login) -> Any: ...
    def UserLogins(self, group) -> Any: ...
    def UserPasswordChange(self, type, login, password) -> Any: ...
    def UserPasswordCheck(self, type, login, password) -> Any: ...
    def UserRequest(self, login) -> Any: ...
    def UserRequestByGroup(self, group) -> Any: ...
    def UserRequestByGroupCSV(self, group, fields) -> Any: ...
    def UserRequestByGroupNumPy(self, group, fields) -> Any: ...
    def UserRequestByLogins(self, login_list) -> Any: ...
    def UserRequestByLoginsCSV(self, login_list, fields) -> Any: ...
    def UserRequestByLoginsNumPy(self, login_list, fields) -> Any: ...
    def UserSubscribe(self, user_sink) -> Any: ...
    def UserTotal(self) -> int: ...
    def UserUnsubscribe(self, user_sink) -> Any: ...
    def UserUpdate(self, user) -> Any: ...
    def UserUpdateBatch(self, user_list) -> Any: ...

def InitializeManagerAPIPath(module_path: str, work_path: str) -> bool: ...
def LastError() -> tuple[int,EnMTAPIRetcode,str]: ...
def LicenseCheckAdmin(admin: AdminAPI, name: str) -> bool: ...
def LicenseCheckManager(manager: ManagerAPI, name: str) -> bool: ...
